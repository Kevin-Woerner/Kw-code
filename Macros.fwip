#    Copyright (C) 2018-2021 by Kevin D. Woerner
# 2021-05-11 kdw  secant loop simplified
# 2021-04-14 kdw  macro reformat
# 2020-11-28 kdw  macro syntax overhaul
# 2020-08-17 kdw  macro syntax changed
# 2020-07-24 kdw  comment cleanup
# 2020-06-20 kdw  comment change
# 2020-04-26 kdw  block indentation
# 2020-04-23 kdw  const format change
# 2020-04-12 kdw  comment change
# 2020-04-11 kdw  macro arg format
# 2020-04-08 kdw  preprocess sigil change
# 2020-03-06 kdw  RE[P]LACE / IN[D]EX changes
# 2020-03-03 kdw  comment changed:odd chars
# 2020-03-02 kdw  s/_NE[X]T/_E[N]D/g
# 2020-02-26 kdw  HO[R]NER rmed
# 2020-02-14 kdw  incomplete beta work
# 2020-02-03 kdw  .*_LOOP changed
# 2019-11-19 kdw  format change
# 2019-10-04 kdw  comment change
# 2019-10-02 kdw  macro arg format change
# 2019-08-24 kdw  for and count loops have from clause
# 2019-08-14 kdw  comments added
# 2019-08-13 kdw  reorg ho[r]ner
# 2019-08-06 kdw  rmed backslashes, macro arg renam
# 2019-06-02 kdw  NR_ to RAPHSON_
# 2019-05-31 kdw  NR_DO to RAPHSON_LOOP; et al
# 2019-05-29 kdw  comment changed
# 2019-05-16 kdw  loop limit def mved
# 2019-03-18 kdw  macro syntax changed
# 2019-03-08 kdw  is[e]qual to is[e]q, et al.
# 2019-03-06 kdw  is.* funcs changed
# 2019-03-04 kdw  loop-limit work
# 2019-02-28 kdw  REP[L]ACE/DE[F]INE work
# 2019-02-19 kdw  macro syntax
# 2019-02-13 kdw  comment work
# 2018-12-20 kdw  work on module specific functions
# 2018-12-12 kdw  created

{MACRO LOOP_LIMIT {
   20
}}   # limit for loops

{MACRO SECANT_DECLARATIONS {
   DBL scvx_xp;
   DBL scvx_xx;
   DBL scvx_yp;
   DBL scvx_yy;
   DBL scvx_dx;
   INT scvx_ii;
}}

{MACRO SECANT_LOOP <XINIT> ; <XDELT> ; <FUNCTION> {
   # return XX where
   #   <FUNCTION>(XX) == 0
   # BEG Secant Calculation
   scvx_dx = <XDELT>;
   scvx_xx = <XINIT>;
   scvx_yy = <FUNCTION>;
   FOR scvx_ii FROM 0 TO {LOOP_LIMIT}:
      scvx_xp = scvx_xx;
      scvx_yp = scvx_yy;
      scvx_xx += scvx_dx;
      IF Kw.iseq(scvx_xp, scvx_xx):
         FOR_EXIT;
      IF_END
      scvx_yy = <FUNCTION>;
      IF Kw.iseq(scvx_yy, scvx_yp):
         FOR_EXIT;
      IF_END
      scvx_dx *= -scvx_yy / (scvx_yy - scvx_yp);
   FOR_END
   # END Secant Calculation
}}

{MACRO RAPHSON_DECLARATIONS {
   INT nrvx_ii;
   DBL nrvx_yy;
   DBL nrvx_xx;
   DBL nrvx_dy;
   DBL nrvx_xp;
}}

{MACRO RAPHSON_LOOP <XINIT> ; <FUNCTION> ; <DFUNCTION> {
   # return XX where
   #    <FUNCTION>(XX) == 0
   # BEG Newton-Raphson Calculation
   nrvx_xx = <XINIT>;
   FOR nrvx_ii FROM 0 TO {LOOP_LIMIT}:
      nrvx_xp = nrvx_xx;
      nrvx_dy = <DFUNCTION>;
      IF Kw.iszero(nrvx_dy):
         FOR_EXIT;
      IF_END
      nrvx_yy = <FUNCTION>;
      nrvx_xx -= nrvx_yy / nrvx_dy;
      IF Kw.iseq(nrvx_xp, nrvx_xx):
         FOR_EXIT;
      IF_END
   FOR_END
   # END Newton-Raphson Calculation
}}
