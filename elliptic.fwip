#    Copyright (C) 2018-2021 by Kevin D. Woerner
# 2021-05-14 kdw  var renam; [scd]n func rework
# 2021-05-12 kdw  minor var rename
# 2021-05-11 kdw  recursion work / calrification
# 2021-04-20 kdw  var name change (mainly mm)
# 2021-04-15 kdw  indent work
# 2021-04-11 kdw  indent work
# 2021-04-06 kdw  indent work
# 2021-03-23 kdw  long lines
# 2021-03-15 kdw  lx_.* const names
# 2021-02-04 kdw  add spaces to test lines
# 2020-12-08 kdw  elliptic-eps defined
# 2020-12-03 kdw  float explicit const work
# 2020-11-28 kdw  macro syntax overhaul
# 2020-08-17 kdw  macro syntax changed
# 2020-08-12 kdw  peak value for elliptic1
# 2020-08-11 kdw  botched extending elliptic1 to 1 < m II
# 2020-08-10 kdw  k,a parameter funcs
# 2020-08-07 kdw  botched extending elliptic1 to 1 < m
# 2020-08-03 kdw  explicit module for pi and tau
# 2020-07-27 kdw  block syntax
# 2020-07-24 kdw  comment cleanup
# 2020-07-23 kdw  minor reorg
# 2020-07-07 kdw  extend to m<0 and 1<m II
# 2020-07-05 kdw  extend to m<0 and 1<m
# 2020-07-03 kdw  cir[2]ell and ell[2]cir funcs
# 2020-07-02 kdw  debugging
# 2020-06-30 kdw  tests changed
# 2020-06-26 kdw  more theta functions#
# 2020-06-25 kdw  theta functions
# 2020-06-23 kdw  comment correction
# 2020-06-20 kdw  jacobi pq funcs renam
# 2020-06-15 kdw  rework of jacobi funcs
# 2020-06-12 kdw  more jacobi funcs
# 2020-06-10 kdw  tests: more sig figs
# 2020-06-09 kdw  elli[p]ticEi debugging
# 2020-06-08 kdw  integral function stuff
# 2020-06-06 kdw  comment change
# 2020-05-20 kdw  module for pi made explicit
# 2020-04-26 kdw  block indentation
# 2020-04-12 kdw  comment change
# 2020-04-02 kdw  re[t]urn rework
# 2020-04-01 kdw  t[a]n to TA[N]
# 2020-03-03 kdw  comment change
# 2020-03-02 kdw  s/_N[E]XT/_[E]ND/
# 2020-02-24 kdw  function comments
# 2020-02-21 kdw  car[l]sonR[FCDJ] funcs
# 2020-02-19 kdw  e[l]liptic[3P] funcs
# 2020-02-18 kdw  e[l]liptic[1KF]i? funcs
# 2019-12-27 kdw  explicit K[w] module
# 2019-12-26 kdw  module name addded to funcs
# 2019-10-04 kdw  comment change
# 2019-08-24 kdw  for and count loops have from clause
# 2019-08-06 kdw  rmed backslahses;macro arg renam
# 2019-06-02 kdw  elliptic1 wtf?; no net change
# 2019-05-29 kdw  comment changed
# 2019-05-22 kdw  s/FU[N]CT[I]ON/FU[N]C/g
# 2019-05-16 kdw  loop limit def mved
# 2019-05-01 kdw  consts explicit module name
# 2019-03-15 kdw  use to[p]yh1
# 2019-03-09 kdw  .*mean() func renam
# 2019-03-08 kdw  is[e]qual to is[e]q, et al.
# 2019-03-06 kdw  is.* funcs changed
# 2019-03-04 kdw  loop-limit work
# 2018-10-04 kdw  uppercased fwip trig funcs
# 2018-07-14 kdw  float num format
# 2018-04-03 kdw  rm () from return
# 2018-01-08 kdw  AGM formulas
# 2018-01-06 kdw  AGM formulas
# 2018-01-04 kdw  created

# A lot of the following code was snarfed from:
# Cephes Math Library Release 2.8:  June, 2000
# Copyright 1984, 1987, 1993, 2000 by Stephen L. Moshier

FUNC DBL m2k(DBL emm):
   RETURN SQRT(emm);
FUNC_END

FUNC DBL k2m(DBL ekk):
   # m == ekk * ekk
   RETURN ekk * ekk;
FUNC_END

FUNC DBL a2k(DBL eaa):
   RETURN SIN(eaa);
FUNC_END

FUNC DBL k2a(DBL ekk):
   RETURN Kw.sininv(ekk);
FUNC_END

FUNC DBL a2m(DBL eaa):
   RETURN Kw.square(SIN(eaa));
FUNC_END

FUNC DBL m2a(DBL emm):
   RETURN Kw.sininv(SQRT(emm));
FUNC_END

FUNC DBL m2b(DBL emm):
   RETURN 1.0 / SQRT(1.0 - emm);
FUNC_END

FUNC DBL b2m(DBL ebb):
   RETURN 1.0 - 1.0 / (ebb * ebb);
FUNC_END

FUNC DBL elliptic1m(DBL emm):
   # Complete Elliptic Integral of the 1th kind.
   #          PI/2          1
   # INTEGRATE      -------------------- dt
   #             0    ------------------
   #                 / 1 - emm SIN(t)**2
   #                V
   DBL retvalu;
   DBL aa_arr[2];
   DBL bb_arr[2];
   DBL cc_arr[2];
   DBL dd;

   IF emm < 1.0:
      retvalu = Kw.PI / (2.0 * Kw.agmean(1.0, SQRT(1.0 - emm)));
   ELSIF 1.0 < emm:
      aa_arr[0] = 1.0;
      aa_arr[1] = 0.0;
      bb_arr[0] = 0.0;
      bb_arr[1] = SQRT(emm - 1.0);
      dd = Kw.agcmean(aa_arr[], bb_arr[], cc_arr[]);
      retvalu = Kw.PI / (2.0 * dd);
   ELSE:
      retvalu = 20.0;
   IF_END
   RETURN retvalu;
FUNC_END
#TEST:elliptic1m(0.01) == carlsonRF(0,0.99,1);
#TEST:elliptic1m(0.49) == 1.84569399837472351758652865488421984;

FUNC DBL ellipticK(DBL ekk):
   # Complete Elliptic Integral of the 1th kind.
   RETURN elliptic1m(k2m(ekk));
FUNC_END

FUNC DBL elliptic1m__1(DBL emm):
   # Complete Elliptic Integral of the 1th kind
   #   == RF(0, 1-EMM, 1)
   RETURN Kw.carlsonRF(0.0, 1.0 - emm, 1.0);
FUNC_END

FUNC DBL elliptic1m__2(DBL emm):
   # Complete Elliptic Integral of the 1th kind
   DBL term;
   DBL sum_curr;
   DBL sum_prev;
   INT ii;

   term = Kw.TAU / 4.0;
   sum_curr = 0.0;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT ii FROM 1 BY 2:
      term *= Kw.square(emm * ii / (ii + 1.0));
      sum_prev = sum_curr;
      sum_curr += term;
   AWAIT_END
   RETURN sum_curr;
FUNC_END

FUNC DBL elliptic1im(DBL emm, DBL circ_rad):
   # Incomplete Elliptic Integral of the 1th kind.
   #      CIRC_RAD           1
   # INTEGRATE      -------------------- dt
   #             0    ------------------
   #                 / 1 - emm SIN(t)**2
   #                V
   DBL aan;
   DBL ggn;
   DBL cc;
   BOL skip_flag;
   DBL temp;
   DBL retvalu;
   DBL tt;
   DBL kresult;
   DBL lcirc_rad;
   DBL emmc;
   INT ii;
   INT modd;
   INT signof;
   INT npihlfs;
   DBL ee;

   emmc = 1.0 - emm;
   IF Kw.iszero(emm):
      retvalu = circ_rad;
   ELSIF Kw.iszero(emmc):
      IF Kw.PI / 2.0 <= ABS(circ_rad):
         retvalu = Kw.DBLMAX;
      ELSE:
         retvalu = LN(TAN((Kw.PI / 2.0 + circ_rad) / 2.0));
      IF_END
   ELSE:
      npihlfs = FLOOR(circ_rad / (Kw.PI / 2.0));
      IF Kw.isodd(npihlfs):
         npihlfs += 1;
      IF_END
      # now npihlfs is even
      lcirc_rad = circ_rad;
      IF npihlfs == 0:
         kresult = 0.0;
      ELSE:
         kresult = Kw.elliptic1m(emm);
         lcirc_rad -= npihlfs * Kw.PI / 2.0;
      IF_END
      IF lcirc_rad < 0.0:
         lcirc_rad = -lcirc_rad;
         signof = -1;
      ELSE:
         signof = 1;
      IF_END
      tt = TAN(lcirc_rad);
      ggn = SQRT(emmc);
      skip_flag = FALSE;
      IF 10.0 < ABS(tt):
         ee = 1.0 / (ggn * tt);
         IF ABS(ee) < 10.0:
            IF npihlfs == 0:
               kresult = Kw.elliptic1m(emm);
            IF_END
            temp = kresult - Kw.elliptic1im(emm, ATAN2(ee, 1.0));
            skip_flag = TRUE;
         IF_END
      IF_END
      IF NOT skip_flag:
         aan = 1.0;
         ii = 1;
         modd = 0;

         AWAIT ABS(cc / aan) <= Kw.DBLEPS:
            temp = ggn / aan;
            lcirc_rad += ATAN2(tt * temp, 1.0) + modd * Kw.PI;
            modd = FLOOR(lcirc_rad / Kw.PI + 0.5);
            tt *= (1.0 + temp) / (1.0 - temp * tt * tt);
            cc = (aan - ggn) / 2.0;
            temp = SQRT(aan * ggn);
            aan = (aan + ggn) / 2.0;
            ggn = temp;
            ii += ii;
         AWAIT_END

         temp = (ATAN2(tt, 1.0) + modd * Kw.PI) / (ii * aan);
      IF_END
      IF signof < 0:
         temp = -temp;
      IF_END
      retvalu = temp + npihlfs * kresult;
   IF_END
   RETURN retvalu;
FUNC_END
#TEST:elliptic1im(0.81,1) == 1.159661070732198966132463477820238;

{MACRO ELLIPT12 <NUM> ; <ARG> {
   FUNC DBL elliptic<NUM><ARG>(DBL <ARG><ARG>):
      # Complete Elliptic Integral of the <NUM>th kind.
      RETURN elliptic<NUM>m(<ARG>2m(<ARG><ARG>));
   FUNC_END
   FUNC DBL elliptic<NUM>i<ARG>(DBL <ARG><ARG>, DBL circ_rad):
      # Incomplete Elliptic Integral of the <NUM>th kind.
      RETURN elliptic<NUM>im(<ARG>2m(<ARG><ARG>), circ_rad);
   FUNC_END
}}

{ELLIPT12 1 ; k }
{ELLIPT12 1 ; a }

FUNC DBL ellipticF(DBL ekk, DBL circ_rad):
   # Incomplete Elliptic Integral of the 1th kind.
   RETURN elliptic1im(k2m(ekk), circ_rad);
FUNC_END

FUNC DBL elliptic1im__1(DBL emm, DBL circ_rad):
   # Incomplete Elliptic Integral of the 1th kind.
   #      CIRC_RAD           1
   # INTEGRATE      -------------------- dt
   #             0    ------------------
   #                 / 1 - emm SIN(t)**2
   #                V
   # via
   #   ==SIN(PHI) * RF(COS(PHI)**2, 1 - EMM * SIN(PHI)**2, 1)
   DBL sinphi;
   INT npihlfs;
   DBL lcirc_rad;
   DBL kresult;

   npihlfs = FLOOR(circ_rad / (Kw.PI / 2.0));
   IF Kw.isodd(npihlfs):
      npihlfs += 1;
   IF_END
   # now npihlfs is even
   lcirc_rad = circ_rad;
   IF npihlfs == 0:
      kresult = 0.0;
   ELSE:
      kresult = Kw.elliptic1m(emm) * npihlfs;
      lcirc_rad -= npihlfs * Kw.PI / 2.0;
   IF_END
   sinphi = SIN(lcirc_rad);
   RETURN sinphi * Kw.carlsonRF(Kw.square(COS(lcirc_rad))
            , 1.0 - emm * Kw.square(sinphi), 1.0) + kresult;
FUNC_END

FUNC DBL elliptic2m(DBL emm):
   # Complete Elliptic Integral of the 2th kind.
   #          PI/2    ------------------
   # INTEGRATE       / 1 - emm SIN(t)**2 dt
   #             0  V
   DBL aan;
   DBL ggn;
   DBL tn;
   DBL twon;
   DBL sum;
   DBL sum_prev;
   INT ii;
   DBL aemm;
   DBL retvalu;

   aemm = ABS(emm);
   IF aemm < 1.0:
      twon = 0.5;
      aan = 1.0;
      ggn = SQRT(1.0 - emm);
      sum = 1.0 - emm / 2.0;
      AWAIT Kw.iseq(sum, sum_prev) COUNT ii FROM 0 TO {LOOP_LIMIT}:
         twon *= 2.0;
         tn = aan;   # temporary variable
         aan = (aan + ggn) / 2.0;
         ggn = SQRT(tn * ggn);
         sum_prev = sum;
         sum -= twon * (aan * aan - ggn * ggn);
      AWAIT_END
      retvalu = Kw.PI * sum / (2.0 * aan);
   ELSE:
      retvalu = 1.0;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL ellipticE(DBL ekk):
   # Complete Elliptic Integral of the 2th kind.
   RETURN elliptic2m(k2m(ekk));
FUNC_END

FUNC DBL elliptic2m__1(DBL emm):
   # Complete Elliptic Integral of the 2th kind.
   #   == RF(0, 1-EMM, 1) - EMM * RD(0, 1-EMM, 1) / 3
   RETURN Kw.carlsonRF(0.0, 1.0 - emm, 1.0)
            - emm * Kw.carlsonRD(0.0, 1.0 - emm, 1.0) / 3.0;
FUNC_END

FUNC DBL elliptic2im(DBL emm, DBL circ_rad):
   # Incomplete Elliptic Integral of the 2th kind.
   #      CIRC_RAD    ------------------
   # INTEGRATE       / 1 - emm SIN(t)**2 dt
   #             0  V
   DBL aan;
   DBL ggn;
   DBL cc;
   DBL errsum;
   DBL temp;
   DBL tt;
   DBL eliptwoemm;
   DBL emmc;
   INT ii;
   INT modd;
   INT npihalfs;
   INT signof;
   DBL lcirc_rad;
   DBL retvalu;

   IF Kw.iszero(emm):
      retvalu = circ_rad;
   ELSE:
      emmc = 1.0 - emm;
      eliptwoemm = elliptic2m(emm);
      npihalfs = FLOOR(circ_rad / (Kw.PI / 2.0));
      IF Kw.isodd(npihalfs):
         npihalfs += 1;
      IF_END
      lcirc_rad = circ_rad - npihalfs * Kw.PI / 2.0;
      IF Kw.iszero(emmc):
         retvalu = SIN(lcirc_rad) + npihalfs * eliptwoemm;
      ELSE:
         IF lcirc_rad < 0.0:
            lcirc_rad = -lcirc_rad;
            signof = -1;
         ELSE:
            signof = 1;
         IF_END
         tt = TAN(lcirc_rad);
         ggn = SQRT(emmc);
         IF ABS(tt) < -1:
            errsum = 1.0 / (ggn * tt);
         ELSE:
            errsum = 0.0;
         IF_END
         IF 0.0 < ABS(errsum) AND ABS(errsum) < 1000.0:
            errsum = ATAN2(1.0, ggn * tt);
            temp = eliptwoemm - elliptic2im(emm, errsum)
                     + emm * SIN(circ_rad) * SIN(errsum);
         ELSE:
            cc = SQRT(emm);
            aan = 1.0;
            ii = 1;
            modd = 0;

            WHILE Kw.DBLEPS < ABS(cc / aan):
               temp = ggn / aan;
               lcirc_rad += ATAN2(tt * temp, 1.0) + modd * Kw.PI;
               modd = FLOOR(lcirc_rad / Kw.PI + 0.5);
               tt *= (1.0 + temp) / (1.0 - temp * tt * tt);
               cc = (aan - ggn) / 2.0;
               temp = SQRT(aan * ggn);
               aan = (aan + ggn) / 2.0;
               ggn = temp;
               ii += ii;
               errsum += cc * SIN(lcirc_rad);
            WHILE_END
            temp = errsum + eliptwoemm * (ATAN2(tt, 1.0) + modd * Kw.PI)
                     / (ii * aan * elliptic1m(emm));
         IF_END

         IF signof < 0:
            temp = -temp;
         IF_END
         retvalu = temp + npihalfs * eliptwoemm;
      IF_END
   IF_END
   RETURN retvalu;
FUNC_END
#TEST:elliptic2im(0.8,0.7) == 0.65610742990242828839367957558430;

FUNC DBL ellipticEi(DBL ekk, DBL circ_rad):
   # Incomplete Elliptic Integral of the 2th kind.
   RETURN elliptic2im(k2m(ekk), circ_rad);
FUNC_END

FUNC DBL elliptic2im__1(DBL emm, DBL circ_rad):
   # Incomplete Elliptic Integral of the 2th kind.
   #   == SIN(PHI) * RF(CPQ, 1 - EMM * SPQ, 1)
   #      - EMM * SIN(PHI) * SPQ / 3 * RD(CPQ, 1 - EMM * SPQ, 1)
   # Where SPQ = SIN(PHI)**2, and CPQ = COS(PHI)**2
   DBL sinphi;
   DBL sinphisq;
   DBL sinphicu;
   DBL cosphisq;
   DBL argb;
   INT npihlfs;
   DBL lcirc_rad;
   DBL kresult;

   npihlfs = FLOOR(circ_rad / (Kw.PI / 2.0));
   IF Kw.isodd(npihlfs):
      npihlfs += 1;
   IF_END
   # now npihlfs is even
   lcirc_rad = circ_rad;
   IF npihlfs == 0:
      kresult = 0.0;
   ELSE:
      kresult = Kw.elliptic2m(emm) * npihlfs;
      lcirc_rad -= npihlfs * Kw.PI / 2.0;
   IF_END

   sinphi = SIN(lcirc_rad);
   sinphisq = sinphi * sinphi;
   sinphicu = sinphi * sinphisq;
   cosphisq = Kw.square(COS(lcirc_rad));
   argb = 1.0 - emm * sinphisq;

   RETURN sinphi * carlsonRF(cosphisq, argb, 1.0)
            - emm * sinphicu * carlsonRD(cosphisq, argb, 1.0) / 3.0
            + kresult;
FUNC_END
#TEST:elliptic2im__1(0.8,0.7) == 0.6561074299024282883936795756;

{ELLIPT12 2 ; k }
{ELLIPT12 2 ; a }

FUNC DBL elliptic3m(DBL enn, DBL emm):
   # Complete Elliptic Integral of the 3th kind.
   #          PI/2                    1
   # INTEGRATE      ---------------------------------------- dt
   #             0                        ------------------
   #                (1 - enn SIN(t)**2)  / 1 - emm SIN(t)**2
   #                                    V
   DBL aan;
   DBL ggn;
   DBL ppn;
   DBL een;
   DBL qqn;
   DBL tpp;
   DBL tag;
   DBL tn;
   DBL sum;
   DBL sum_prev;
   INT ii;
   DBL aemm;
   DBL retvalu;

   aemm = ABS(emm);
   IF aemm < 1.0:
      aan = 1.0;
      ggn = SQRT(1.0 - emm);
      IF 1.0 <= ABS(enn):
         ppn = SQRT(1.0 - emm / enn);
      ELSE:
         ppn = SQRT(1.0 - enn);
      IF_END
      qqn = 1.0;
      sum = qqn;
      AWAIT Kw.iseq(sum, sum_prev) AND Kw.iseq(aan, ggn)
               COUNT ii FROM 0 TO {LOOP_LIMIT}:
         tpp = ppn * ppn;
         tag = aan * ggn;
         een = (tpp - tag) / (tpp + tag);
         ppn = (tpp + tag) / (2.0 * ppn);
         qqn = qqn * een / 2.0;
         aan = (aan + ggn) / 2.0;
         ggn = SQRT(tag);
         sum_prev = sum;
         sum += qqn;
      AWAIT_END
      IF 1.0 <= ABS(enn):
         tn = emm * sum / (emm - enn);
      ELSE:
         tn = 2.0 + sum * enn / (1.0 - enn);
      IF_END
      retvalu = Kw.PI * tn / (4.0 * aan);
   ELSE:
      retvalu = 1.0;
   IF_END
   RETURN retvalu;
FUNC_END
#TEST:elliptic3m(0.5,.25) == 2.41367150420119464066692352053929;

{MACRO ELLIPT3 <ARG> {
   FUNC DBL elliptic3<ARG>(DBL enn, DBL <ARG><ARG>):
      # Complete Elliptic Integral of the 3th kind.
      RETURN elliptic3m(enn, <ARG>2m(<ARG><ARG>));
   FUNC_END
   FUNC DBL elliptic3i<ARG>(DBL enn, DBL <ARG><ARG>, DBL circ_rad):
      # Incomplete Elliptic Integral of the 3th kind.
      RETURN elliptic3im(enn, <ARG>2m(<ARG><ARG>), circ_rad);
   FUNC_END
}}

{ELLIPT3 k }
{ELLIPT3 a }

FUNC DBL ellipticP(DBL ekk, DBL circ_rad):
   # Complete Elliptic Integral of the 3th kind.
   RETURN elliptic3m(ekk, circ_rad);
FUNC_END
#TEST:ellipticP(0.64,0.81) == 4.2128609957570842166141260721523;

FUNC DBL elliptic3im(DBL enn, DBL emm, DBL circ_rad):
   # Incomplete Elliptic Integral of the 3th kind.
   #      CIRC_RAD                      1
   # INTEGRATE      ---------------------------------------- dt
   #             0                        ------------------
   #                (1 - enn SIN(t)**2)  / 1 - emm SIN(t)**2
   #                                    V
   DBL sp;
   DBL cp;
   DBL spq;
   DBL cpq;
   DBL spm;
   DBL spn;

   sp = SIN(circ_rad);
   cp = COS(circ_rad);
   spq = sp * sp;
   cpq = cp * cp;
   spm = 1.0 - emm * spq;
   spn = 1.0 - enn * spq;

   RETURN sp * (Kw.carlsonRF(cpq, spm, 1.0)
            + spq * enn * Kw.carlsonRJ(cpq, spm, 1.0, spn) / 3.0);
FUNC_END

FUNC DBL ellipticPi(DBL enn, DBL ekk, DBL circ_rad):
   # Incomplete Elliptic Integral of the 3th kind.
   RETURN elliptic3im(enn, k2m(ekk), circ_rad);
FUNC_END

FUNC DBL elliptic3m__1(DBL enn, DBL emm):
   # Complete Elliptic Integral of the 3th kind.
   #   == carlsonRF(0, 1-EMM, 1) + ENN carlsonRJ(0, 1-EMM, 1, 1-ENN) / 3
   RETURN Kw.carlsonRF(0.0, 1.0-emm, 1.0)
            + enn * Kw.carlsonRJ(0.0, 1.0-emm, 1.0, 1.0-enn) / 3.0;
FUNC_END

FUNC DBL elliptic3im__1(DBL enn, DBL emm, DBL circ_rad):
   # Incomplete Elliptic Integral of the 3th kind.
   #   == SIN(PHI) * RF(CPQ, 1 - EMM * SPQ, 1)
   #         - ENN * SIN(PHI) * SPQ / 3
   #               * RJ(CPQ, 1 - EMM * SPQ, 1, 1 - ENN * SPQ)
   # Where SPQ = SIN(PHI)**2, and CPQ = COS(PHI)**2
   DBL sinphi;
   DBL sinphisq;
   DBL sinphicu;
   DBL cosphisq;
   DBL argb;
   INT npihlfs;
   DBL lcirc_rad;
   DBL kresult;

   npihlfs = FLOOR(circ_rad / (Kw.PI / 2.0));
   IF Kw.isodd(npihlfs):
      npihlfs += 1;
   IF_END
   # now npihlfs is even
   lcirc_rad = circ_rad;
   IF npihlfs == 0:
      kresult = 0.0;
   ELSE:
      kresult = Kw.elliptic3m(enn, emm) * npihlfs;
      lcirc_rad -= npihlfs * Kw.PI / 2.0;
   IF_END

   sinphi = SIN(lcirc_rad);
   sinphisq = sinphi * sinphi;
   sinphicu = sinphi * sinphisq;
   cosphisq = Kw.square(COS(lcirc_rad));
   argb = 1.0 - emm * sinphisq;

   RETURN kresult + sinphi * carlsonRF(cosphisq, argb, 1.0)
            + sinphicu * carlsonRJ(cosphisq, argb, 1.0, 1.0 - enn * sinphisq)
            * enn / 3.0;
FUNC_END

####### Jacobi functions
BLOCK: # Jacobi elliptic functions
   BLOCK_DEF CONST LX_ELLIPTIC_EPS 1.0E-9;
   BLOCK_DEF DBL lv_emm = -10.0;
   BLOCK_DEF DBL lv_elli_rad = -10.0;
   BLOCK_DEF DBL lv_arr_arr[4];

   BLOCK_DEF FUNC DBL lf_jacobiphi_0_1(DBL emm
            , DBL elli_rad):
      # convert ELLI_RAD into CIRC_RAD for EMM in (0,1)
      #    SIN(jacobiphi(M,ELLI_RAD)) = sn(M,ELLI_RAD)
      #    COS(jacobiphi(M,ELLI_RAD)) = cn(M,ELLI_RAD)
      DBL ai;
      DBL ebb;
      DBL circ_rad;
      DBL geo_mean;
      DBL twon;
      DBL aa_arr[20];
      DBL cc_arr[20];
      INT ii;

      ebb = SQRT(1.0 - emm);
      aa_arr[0] = 1.0;
      cc_arr[0] = SQRT(emm);
      twon = 1.0;
      ii = 0;
      WHILE Kw.DBLEPS < ABS(cc_arr[ii] / aa_arr[ii]):
         IF ARRAYLAST(aa_arr[]) - 1 < ii:
            WHILE_EXIT;
         IF_END
         ai = aa_arr[ii];
         ii += 1;
         cc_arr[ii] = (ai - ebb) / 2.0;
         geo_mean = SQRT(ai * ebb);
         aa_arr[ii] = (ai + ebb) / 2.0;
         ebb = geo_mean;
         twon *= 2.0;
      WHILE_END

      circ_rad = twon * aa_arr[ii] * elli_rad;
      WHILE 0 < ii:
         ebb = cc_arr[ii] * SIN(circ_rad) / aa_arr[ii];
         circ_rad = (Kw.sininv(ebb) + circ_rad) / 2.0;
         ii -= 1;
      WHILE_END
      RETURN circ_rad;
   FUNC_END

   BLOCK_DEF FUNC DBL lf_cn_0_1(DBL emm, DBL elli_rad):
      # elliptic cosine for 0 < EMM <= 1
      DBL ai;
      DBL csx;
      DBL snx;
      DBL retvalu;

      # Check for special cases
      IF emm < LX_ELLIPTIC_EPS:
         snx = SIN(elli_rad);
         csx = COS(elli_rad);
         ai = emm * (elli_rad - snx * csx) / 4.0;
         retvalu = csx + ai * snx;
      ELSIF emm < 1.0 - LX_ELLIPTIC_EPS:
         retvalu = COS(lf_jacobiphi_0_1(emm, elli_rad));
      ELSE:
         csx = Kw.cosh(elli_rad);
         IF emm < 1.0:
            snx = Kw.sinh(elli_rad);
            ai = (1.0 - emm) / 4.0;
            retvalu = 1.0 / csx - ai * (csx * snx + elli_rad);
         ELSE:
            retvalu = 1.0 / csx;
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END

   BLOCK_DEF FUNC DBL lf_sn_0_1(DBL emm, DBL elli_rad):
      # elliptic sine for 0 < emm <= 1
      DBL ai;
      DBL csx;
      DBL snx;
      DBL retvalu;

      # Check for special cases
      IF emm < LX_ELLIPTIC_EPS:
         snx = SIN(elli_rad);
         csx = COS(elli_rad);
         ai = emm * (elli_rad - snx * csx) / 4.0;
         retvalu = snx - ai * csx;
      ELSIF emm < 1.0 - LX_ELLIPTIC_EPS:
         retvalu = SIN(lf_jacobiphi_0_1(emm, elli_rad));
      ELSE:
         csx = Kw.cosh(elli_rad);
         snx = Kw.sinh(elli_rad);
         IF emm < 1.0:
            ai = (1.0 - emm) / 4.0;
            retvalu = (snx + snx * ai - ai * elli_rad / csx) / csx;
         ELSE:
            retvalu = snx / csx;
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END

   BLOCK_DEF FUNC DBL lf_dn_0_1(DBL emm, DBL elli_rad):
      DBL ai;
      DBL csx;
      DBL snx;
      DBL retvalu;

      # Check for special cases
      IF emm < LX_ELLIPTIC_EPS:
         snx = SIN(elli_rad);
         retvalu = 1.0 - emm * snx * snx / 2.0;
      ELSIF emm < 1.0 - LX_ELLIPTIC_EPS:
         snx = SIN(lf_jacobiphi_0_1(emm, elli_rad));
         retvalu = Kw.sqrtx(1.0 - emm * snx * snx);
      ELSE:
         csx = Kw.cosh(elli_rad);
         IF emm < 1.0:
            ai = (1.0 - emm) / 4.0;
            snx = Kw.sinh(elli_rad);
            retvalu = 1.0 / csx + ai * (csx * snx + elli_rad);
         ELSE:
            retvalu = 1.0 / csx;
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END

   BLOCK_DEF FUNC DBL lf_cn_gt1(DBL emm, DBL elli_rad):
      # elliptic cosine for 1 < EMM
      DBL ekk;
      DBL retvalu;

      ekk = m2k(emm);
      retvalu = lf_dn_0_1(1.0 / emm, elli_rad * ekk);
      RETURN retvalu;
   FUNC_END

   BLOCK_DEF FUNC DBL lf_sn_gt1(DBL emm, DBL elli_rad):
      # elliptic sine for 1.0 < emm
      DBL ekk;
      DBL retvalu;

      ekk = m2k(emm);
      retvalu = lf_sn_0_1(1.0 / emm, elli_rad * ekk) / ekk;
      RETURN retvalu;
   FUNC_END

   BLOCK_DEF FUNC DBL lf_dn_gt1(DBL emm, DBL elli_rad):
      DBL ekk;
      DBL retvalu;

      ekk = m2k(emm);
      retvalu = lf_cn_0_1(1.0 / emm, elli_rad * ekk);
      RETURN retvalu;
   FUNC_END

   BLOCK_DEF FUNC INT lf_ellpj_0_1(DBL emm
            , DBL elli_rad
            , WRITEONLY DBL ret_arr_p[]):
      # compute the Jacobian function sn, cn, dn and ph for 0 < EMM <= 1
      # sn = RET_ARR_P[0]
      # cn = RET_ARR_P[1]
      # dn = RET_ARR_P[2]
      # ph = RET_ARR_P[3]
      BLOCK_USE lv_emm;
      BLOCK_USE lv_elli_rad;
      DBL ai;
      DBL csx;
      DBL snx;
      DBL circ_rad;
      DBL twon;

      # Check for special cases
      IF emm < LX_ELLIPTIC_EPS:
         snx = SIN(elli_rad);
         csx = COS(elli_rad);
         ai = emm * (elli_rad - snx * csx) / 4.0;
         ret_arr_p[0] = snx - ai * csx;
         ret_arr_p[1] = csx + ai * snx;
         ret_arr_p[2] = 1.0 - emm * snx * snx / 2.0;
         ret_arr_p[3] = elli_rad - ai;
      ELSIF emm < 1.0 - LX_ELLIPTIC_EPS:
         circ_rad = lf_jacobiphi_0_1(emm, elli_rad);

         snx = SIN(circ_rad);
         ret_arr_p[0] = snx;
         ret_arr_p[1] = COS(circ_rad);
         ret_arr_p[2] = Kw.sqrtx(1.0 - emm * snx * snx);
         ret_arr_p[3] = circ_rad;
      ELSE:
         ai = (1.0 - emm) / 4.0;
         csx = Kw.cosh(elli_rad);
         snx = Kw.tanh(elli_rad);
         twon = csx * Kw.sinh(elli_rad);
         ret_arr_p[0] = snx + ai * (twon - elli_rad) / (csx * csx);
         ret_arr_p[3] = 2.0 * ATAN2(EXP(elli_rad), 1.0) - Kw.PI / 2.0
                  + ai * (twon - elli_rad) / csx;
         ai *= snx / csx;
         ret_arr_p[1] = 1.0 / csx - ai * (twon - elli_rad);
         ret_arr_p[2] = 1.0 / csx + ai * (twon + elli_rad);
      IF_END
      lv_emm = emm;
      lv_elli_rad = elli_rad;
      RETURN 0;
   FUNC_END

   BLOCK_DEF FUNC INT lf_ellpj(DBL emm
            , DBL elli_rad
            , WRITEONLY DBL ret_arr_p[]):
      # compute the Jacobian function sn, cn, dn and ph
      # sn = RET_ARR_P[0]
      # cn = RET_ARR_P[1]
      # dn = RET_ARR_P[2]
      # ph = RET_ARR_P[3]
      BLOCK_USE lv_emm;
      BLOCK_USE lv_elli_rad;
      DBL ai;
      DBL csx;
      DBL snx;
      DBL junk_arr[4];

      # Check for special cases
      IF emm < 0.0:
         IF emm < -2.0:
            snx = SIN(elli_rad) + Kw.tanh(elli_rad)
                     - lf_sn_gt1(1.0 - emm, elli_rad);
         ELSE:
            snx = SIN(elli_rad) + Kw.tanh(elli_rad)
                     - lf_sn_0_1(1.0 - emm, elli_rad);
         IF_END
         IF emm < -1.0:
            csx = 2.0 * COS(elli_rad) - lf_cn_gt1(-emm, elli_rad);
         ELSE:
            csx = 2.0 * COS(elli_rad) - lf_cn_0_1(-emm, elli_rad);
         IF_END
         ret_arr_p[0] = snx;
         ret_arr_p[1] = csx;
         ret_arr_p[2] = -dn(-emm, elli_rad) + 2.0;
         ret_arr_p[3] = ATAN2(snx, csx);
      ELSIF emm <= 1.0:
         CALL lf_ellpj_0_1(emm, elli_rad, junk_arr[]);
         ret_arr_p[0] = junk_arr[0];
         ret_arr_p[1] = junk_arr[1];
         ret_arr_p[2] = junk_arr[2];
         ret_arr_p[3] = junk_arr[3];
      ELSE:
         ai = m2k(emm);
         CALL lf_ellpj_0_1(1.0 / emm, elli_rad * ai, junk_arr[]);
         ret_arr_p[0] = junk_arr[0] / ai;
         ret_arr_p[1] = junk_arr[2];
         ret_arr_p[2] = junk_arr[1];
         ret_arr_p[3] = junk_arr[3];
      IF_END
      lv_emm = emm;
      lv_elli_rad = elli_rad;
      RETURN 0;
   FUNC_END

   FUNC DBL jacobiphi(DBL emm
            , DBL elli_rad):
      # convert ELLI_RAD into CIRC_RAD
      #    SIN(jacobiphi(M,ELLI_RAD)) = sn(M,ELLI_RAD)
      #    COS(jacobiphi(M,ELLI_RAD)) = cn(M,ELLI_RAD)
      DBL circ_rad;

      IF 0.0 < emm AND emm < 1.0:
         circ_rad = lf_jacobiphi_0_1(emm, elli_rad);
      ELSE:
         circ_rad = Kw.taninv(sn(emm, elli_rad) / cn(emm, elli_rad));
      IF_END
      RETURN circ_rad;
   FUNC_END

   FUNC DBL sn__1(DBL emm, DBL elli_rad):
      BLOCK_USE lv_emm;
      BLOCK_USE lv_elli_rad;
      BLOCK_USE lv_arr_arr[];

      IF Kw.isneq(emm, lv_emm) OR Kw.isneq(elli_rad, lv_elli_rad):
         CALL lf_ellpj(emm, elli_rad, lv_arr_arr[]);
      IF_END
      RETURN lv_arr_arr[0];
   FUNC_END

   FUNC DBL cn__1(DBL emm, DBL elli_rad):
      BLOCK_USE lv_emm;
      BLOCK_USE lv_elli_rad;
      BLOCK_USE lv_arr_arr[];

      IF Kw.isneq(emm, lv_emm) OR Kw.isneq(elli_rad, lv_elli_rad):
         CALL lf_ellpj(emm, elli_rad, lv_arr_arr[]);
      IF_END
      RETURN lv_arr_arr[1];
   FUNC_END

   FUNC DBL dn__1(DBL emm, DBL elli_rad):
      BLOCK_USE lv_emm;
      BLOCK_USE lv_elli_rad;
      BLOCK_USE lv_arr_arr[];

      IF Kw.isneq(emm, lv_emm) OR Kw.isneq(elli_rad, lv_elli_rad):
         CALL lf_ellpj(emm, elli_rad, lv_arr_arr[]);
      IF_END
      RETURN lv_arr_arr[2];
   FUNC_END

   FUNC DBL dn(DBL emm, DBL elli_rad):
      DBL ekk;
      DBL retvalu;

      # Check for special cases
      IF emm < -1.0:
         retvalu = -lf_dn_gt1(-emm, elli_rad) + 2.0;
      ELSIF emm < 0.0:
         retvalu = -lf_dn_0_1(-emm, elli_rad) + 2.0;
      ELSIF emm <= 1.0:
         retvalu = lf_dn_0_1(emm, elli_rad);
      ELSE:
         ekk = m2k(emm);
         retvalu = lf_cn_0_1(1.0 / emm, elli_rad * ekk);
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL cn(DBL emm, DBL elli_rad):
      # elliptic cosine
      DBL ai;
      DBL csx;
      DBL snx;
      DBL ekk;
      DBL retvalu;

      # Check for special cases
      IF emm < -1.0:
         retvalu = - lf_cn_gt1(-emm, elli_rad) + 2.0 * COS(elli_rad);
      ELSIF emm < 0.0:
         retvalu = - lf_cn_0_1(-emm, elli_rad) + 2.0 * COS(elli_rad);
      ELSIF emm < LX_ELLIPTIC_EPS:
         snx = SIN(elli_rad);
         csx = COS(elli_rad);
         ai = emm * (elli_rad - snx * csx) / 4.0;
         retvalu = csx + ai * snx;
      ELSIF emm < 1.0 - LX_ELLIPTIC_EPS:
         retvalu = COS(lf_jacobiphi_0_1(emm, elli_rad));
      ELSIF emm <= 1.0:
         ai = (1.0 - emm) / 4.0;
         csx = Kw.cosh(elli_rad);
         snx = Kw.sinh(elli_rad);
         retvalu = 1.0 / csx - ai * (csx * snx + elli_rad);
      ELSE:
         ekk = m2k(emm);
         retvalu = lf_dn_0_1(1.0 / emm, elli_rad * ekk);
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL sn(DBL emm, DBL elli_rad):
      # elliptic sine
      DBL ai;
      DBL csx;
      DBL snx;
      DBL ekk;
      DBL retvalu;

      # Check for special cases
      IF emm < -1.0:
         retvalu = SIN(elli_rad) + Kw.tanh(elli_rad)
                  - lf_sn_gt1(1.0 - emm, elli_rad);
      ELSIF emm < 0.0:
         retvalu = SIN(elli_rad) + Kw.tanh(elli_rad)
                  - lf_sn_0_1(1.0 - emm, elli_rad);
      ELSIF emm < LX_ELLIPTIC_EPS:
         snx = SIN(elli_rad);
         csx = COS(elli_rad);
         ai = emm * (elli_rad - snx * csx) / 4.0;
         retvalu = snx - ai * csx;
      ELSIF emm < 1.0 - LX_ELLIPTIC_EPS:
         retvalu = SIN(lf_jacobiphi_0_1(emm, elli_rad));
      ELSIF emm <= 1.0:
         ai = (1.0 - emm) / 4.0;
         csx = Kw.cosh(elli_rad);
         snx = Kw.sinh(elli_rad);
         retvalu = (snx + snx * ai - ai * elli_rad / csx) / csx;
      ELSE:
         ekk = m2k(emm);
         retvalu = lf_sn_0_1(1.0 / emm, elli_rad * ekk) / ekk;
      IF_END
      RETURN retvalu;
   FUNC_END
BLOCK_END   # Jacobi elliptic functions

FUNC DBL cd(DBL emm, DBL elli_rad):
   RETURN cn(emm, elli_rad) / dn(emm, elli_rad);
FUNC_END
FUNC DBL sd(DBL emm, DBL elli_rad):
   RETURN sn(emm, elli_rad) / dn(emm, elli_rad);
FUNC_END
FUNC DBL nd(DBL emm, DBL elli_rad):
   RETURN 1.0 / dn(emm, elli_rad);
FUNC_END

FUNC DBL dc(DBL emm, DBL elli_rad):
   RETURN dn(emm, elli_rad) / cn(emm, elli_rad);
FUNC_END
FUNC DBL nc(DBL emm, DBL elli_rad):
   # elliptic cosecant
   RETURN 1.0 / cn(emm, elli_rad);
FUNC_END
FUNC DBL sc(DBL emm, DBL elli_rad):
   # elliptic tangent
   RETURN sn(emm, elli_rad) / cn(emm, elli_rad);
FUNC_END

FUNC DBL ds(DBL emm, DBL elli_rad):
   RETURN dn(emm, elli_rad) / sn(emm, elli_rad);
FUNC_END
FUNC DBL cs(DBL emm, DBL elli_rad):
   # elliptic cotangent
   RETURN cn(emm, elli_rad) / sn(emm, elli_rad);
FUNC_END
FUNC DBL ns(DBL emm, DBL elli_rad):
   # elliptic cosecant
   RETURN 1.0 / sn(emm, elli_rad);
FUNC_END

FUNC DBL ell2cir(DBL emm, DBL elli_rad):
   # convert an elliptical angle ELLI_RAD
   # into a circular angle CIRC_RAD
   # pseudo-period == (TAU/4)/elliptic1m(emm)
   # LSF Line: y = (TAU/4)/elliptic1m(emm) * x
   RETURN jacobiphi(emm, elli_rad);
FUNC_END

FUNC DBL cir2ell(DBL emm, DBL circ_rad):
   # convert a circular angle CIRC_RAD
   # into an elliptical angle ELLI_RAD
   # pseudo-period == elliptic1m(emm)/(TAU/4)
   # LSF Line: y = elliptic1m(emm)/(TAU/4) * x
   RETURN elliptic1im(emm, circ_rad);
FUNC_END

FUNC DBL jacobicir(DBL emm):
   # circumference of ellipse w/ minor axis == 1, m == EMM
   RETURN 4.0 * elliptic2m(emm) / SQRT(1.0 - emm);
FUNC_END

FUNC DBL nom(DBL emm):
   RETURN EXP(-Kw.PI * Kw.elliptic1m(1.0 - emm) / Kw.elliptic1m(emm));
FUNC_END

FUNC DBL theta1(DBL emm, DBL zz):
   # See https://dlmf.nist.gov/20.2#i
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL sig;
   DBL ang;
   DBL ang_inc;
   DBL qq;

   sig = 1.0;
   qq = nom(emm);
   sum_curr = 0.0;
   ang = zz;
   ang_inc = 2.0 * zz;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 0:
      sum_prev = sum_curr;
      sum_curr += sig * POW(qq, Kw.square(enn + 0.5)) * SIN(ang);
      ang += ang_inc;
      sig = -sig;
   AWAIT_END
   RETURN 2.0 * sum_curr;
FUNC_END

FUNC DBL theta2(DBL emm, DBL zz):
   # See https://dlmf.nist.gov/20.2#i
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL ang;
   DBL ang_inc;
   DBL qq;

   qq = nom(emm);
   sum_curr = 0.0;
   ang = zz;
   ang_inc = 2.0 * zz;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 0:
      sum_prev = sum_curr;
      sum_curr += POW(qq, Kw.square(enn + 0.5)) * COS(ang);
      ang += ang_inc;
   AWAIT_END
   RETURN 2.0 * sum_curr;
FUNC_END

FUNC DBL theta3(DBL emm, DBL zz):
   # See https://dlmf.nist.gov/20.2#i
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL ang;
   DBL ang_inc;
   DBL qq;

   qq = nom(emm);
   sum_curr = 0.0;
   ang = 2.0 * zz;
   ang_inc = ang;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 1:
      sum_prev = sum_curr;
      sum_curr += POW(qq, enn * enn) * COS(ang);
      ang += ang_inc;
   AWAIT_END
   RETURN 1.0 + 2.0 * sum_curr;
FUNC_END

FUNC DBL theta4(DBL emm, DBL zz):
   # See https://dlmf.nist.gov/20.2#i
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL ang;
   DBL ang_inc;
   DBL qq;
   DBL sig;

   sig = 1.0;
   qq = nom(emm);
   sum_curr = 0.0;
   ang = 2.0 * zz;
   ang_inc = ang;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 1:
      sum_prev = sum_curr;
      sum_curr += sig * POW(qq, enn * enn) * COS(ang);
      ang += ang_inc;
      sig = -sig;
   AWAIT_END
   RETURN 1.0 + 2.0 * sum_curr;
FUNC_END

FUNC DBL nevillethetac(DBL emm, DBL zz):
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL qq;
   DBL km;
   DBL cos_of;
   DBL cos_inc;

   km = Kw.elliptic1m(emm);
   qq = EXP(-Kw.PI * Kw.elliptic1m(1.0 - emm) / km);
   sum_curr = 0.0;
   cos_inc = Kw.PI * zz / km;
   cos_of = Kw.PI * zz / (2.0 * km);
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 0:
      sum_prev = sum_curr;
      sum_curr += POW(qq, enn * enn + enn) * COS(cos_of);
      cos_of += cos_inc;
   AWAIT_END
   RETURN sum_curr * SQRT(Kw.TAU * SQRT(qq / emm) / km);
FUNC_END

FUNC DBL nevillethetad(DBL emm, DBL zz):
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL qq;
   DBL km;
   DBL cos_of;
   DBL cos_inc;

   km = Kw.elliptic1m(emm);
   qq = EXP(-Kw.PI * Kw.elliptic1m(1.0 - emm) / km);
   sum_curr = 0.0;
   cos_inc = Kw.PI * zz / km;
   cos_of = Kw.PI * zz / km;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 1:
      sum_prev = sum_curr;
      sum_curr += POW(qq, enn * enn) * COS(cos_of);
      cos_of += cos_inc;
   AWAIT_END
   RETURN (1.0 + 2.0 * sum_curr) * SQRT(Kw.TAU / km) / 2.0;
FUNC_END

FUNC DBL nevillethetan(DBL emm, DBL zz):
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL qq;
   DBL km;
   DBL sig;
   DBL cos_of;
   DBL cos_inc;

   km = Kw.elliptic1m(emm);
   qq = EXP(-Kw.PI * Kw.elliptic1m(1.0 - emm) / km);
   sum_curr = 0.5;
   sig = -1.0;
   cos_inc = Kw.PI * zz / km;
   cos_of = Kw.PI * zz / km;
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 1:
      sum_prev = sum_curr;
      sum_curr += sig * POW(qq, enn * enn) * COS(cos_of);
      cos_of += cos_inc;
      sig = -sig;
   AWAIT_END
   RETURN 2.0 * sum_curr * SQRT(Kw.TAU / (km * SQRT(1.0 - emm))) / 2.0;
FUNC_END

FUNC DBL nevillethetas(DBL emm, DBL zz):
   DBL sum_curr;
   DBL sum_prev;
   INT enn;
   DBL qq;
   DBL km;
   DBL sig;
   DBL cos_of;
   DBL cos_inc;

   km = Kw.elliptic1m(emm);
   qq = EXP(-Kw.PI * Kw.elliptic1m(1.0 - emm) / km);
   sum_curr = 0.0;
   sig = 1.0;
   cos_inc = Kw.PI * zz / km;
   cos_of = Kw.PI * zz / (2.0 * km);
   AWAIT Kw.iseq(sum_curr, sum_prev) COUNT enn FROM 0:
      sum_prev = sum_curr;
      sum_curr += sig * POW(qq, enn * enn + enn) * SIN(cos_of);
      sig = -sig;
      cos_of += cos_inc;
   AWAIT_END
   RETURN sum_curr * SQRT(Kw.TAU * SQRT(qq / (emm * (1.0 - emm))) / km);
FUNC_END

# In general:
#   pq qr = pr
#   sn(m,elli_rad) == SIN(jacobiphi(m,elli_rad))
#   elliptic1im(m,jacobiphi(m,elli_rad)) == elli_rad
#         in [0,elliptic1m(m)]
#   jacobiphi(m,elliptic1im(m,circ_rad)) == circ_rad in [0,PI/2]
#   cX**2 + sX**2 = nX**2 for X in s,d,c,n
#   sn(m,elliptic1im(m,circ_rad)) == SIN(circ_rad)
#   cn(m,elliptic1im(m,circ_rad)) == COS(circ_rad)
#   sc(m,elliptic1im(m,circ_rad)) == TAN(circ_rad)
#   dn(m,elliptic1im(m,circ_rad)) == SQRT(1 - m*SIN(circ_rad)**2)
#   The quarter-period of pq(m,elli_rad) is elliptic1m(m)
#TEST:sn(0.87,elliptic1im(0.87,0.44)) == sin(0.44);
#TEST:cn(0.44,elliptic1im(0.44,0.87)) == cos(0.87);
#TEST:sn(0.34,1.2) == sin(jacobiphi(0.34,1.2));
#TEST:sc(0.94,1.2) == tan(jacobiphi(0.94,1.2));
