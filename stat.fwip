#    Copyright (C) 2015-2021 by Kevin D. Woerner
# 2021-04-15 kdw  indent work
# 2021-04-09 kdw  indent work
# 2021-03-08 kdw  upped line length allowed
# 2020-12-04 kdw  float explicit const work
# 2020-08-17 kdw  comment change
# 2020-07-27 kdw  block syntax
# 2020-07-24 kdw  comment cleanup
# 2020-06-03 kdw  writeonly keyword
# 2020-05-11 kdw  local-func syntax changed
# 2020-04-26 kdw  BL[O]CK indentation work
# 2020-04-12 kdw  comment change
# 2020-03-09 kdw  LO[C]AL_.* keywords
# 2020-03-03 kdw  comment change
# 2020-03-02 kdw  s/_N[E]XT/_E[N]D/
# 2020-01-28 kdw  maxmin func rework
# 2019-12-26 kdw  module name addded to funcs
# 2019-10-04 kdw  comment change
# 2019-08-24 kdw  for and count loops have from clause
# 2019-08-18 kdw  L[O]G to L[N]
# 2019-08-11 kdw  comment cleanup
# 2019-08-06 kdw  rmed backshlashes, macro arg renam
# 2019-07-22 kdw  minor cosmetic tweak
# 2019-05-24 kdw  local replaced private
# 2019-05-22 kdw  s/FU[N]CT[I]ON/FU[N]C/g
# 2019-03-19 kdw  re[t]_val to re[t]valu
# 2018-07-17 kdw  private lf_.* funcs
# 2018-04-19 kdw  consts rework
# 2018-04-03 kdw  rm () from return
# 2018-01-13 kdw  maxabs2, minabs2 funcs
# 2017-11-26 kdw  FR[O]M and B[Y] keywords
# 2017-11-22 kdw  var renam
# 2017-06-13 kdw  C now handle return arrays
# 2017-04-30 kdw  func to function
# 2017-03-10 kdw  get Fw[i]p_Pa[r]se to work
# 2017-03-06 kdw  sigils rmed
# 2017-03-01 kdw  var[y]log-a[d]d space messup
# 2017-02-24 kdw  LAN[G]UAGE change
# 2017-02-20 kdw  array var names
# 2017-02-14 kdw  FWIP Loop syntax changed
# 2017-02-12 kdw  FWIP language change
# 2017-02-08 kdw  min(abs(offset)?)?
# 2017-01-06 kdw  LAN[G]UAGE_[I]F deprecated
# 2016-11-24 kdw  LAN[G]UAGE_N[O]T to LAN[G]UAGE_IFN[O]T
# 2016-11-23 kdw  CN?ST to RE?ADO?NLY
# 2016-11-21 kdw  DE?F to FU?NC
# 2016-11-20 kdw  language change
# 2016-11-11 kdw  var name change
# 2016-10-14 kdw  _p added to several vars
# 2016-09-15 kdw  comment change
# 2016-09-14 kdw  comment change
# 2016-09-13 kdw  lang change
# 2016-04-27 kdw  forced double division in places
# 2016-01-21 kdw  lf_num2norm
# 2015-12-14 kdw  array sigils ; long comments
# 2015-12-11 kdw  _[_]EN[D]IF_[_] obsoleted
# 2015-12-02 kdw  ave[r]age to m[e]an; variable rename
# 2015-11-26 kdw  long lines
# 2015-11-24 kdw  variable rename
# 2015-11-17 kdw  F[O]R format changed
# 2015-10-09 kdw  added comment to st[d]ev2s[p]read
# 2015-10-01 kdw  float equality checks to is.*
# 2015-09-30 kdw  _[_]I[F]_N[O]T_.*(
# 2015-09-29 kdw  C cant return an array
# 2015-09-24 kdw  cosmetic change
# 2015-09-20 kdw  created

BLOCK: # num to norm
   BLOCK_DEF FUNC DBL lf_num2norm(DBL numm):
      DBL retvalu;

      IF numm <= 1:
         retvalu = 0.0;
      ELSE:
         retvalu = 3.0 * SQRT(LN(numm)) - 1.4
                  - (0.5 * LN(numm) - 0.39) / numm;
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL stdev2spread(DBL numm, DBL stdevx):
      # return the expected spread given NUMM data
      # points with standard deviation STDEVX,
      # assuming an underlying normal distribution
      DBL retvalu;

      IF numm <= 1 OR Kw.iszero(stdevx):
         retvalu = 0.0;
      ELSE:
         retvalu = (stdevx * lf_num2norm(numm));
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL spread2stdev(DBL numm, DBL spread):
      # return the expected standard deviation given
      # NUMM data points with SPREAD,
      # assuming an underlying normal distribution
      DBL retvalu;

      IF numm <= 1 OR Kw.iszero(spread):
         retvalu = 0.0;
      ELSE:
         retvalu = (spread / lf_num2norm(numm));
      IF_END
      RETURN retvalu;
   FUNC_END
BLOCK_END # num to norm

FUNC DBL maxabs(INT nn, READONLY DBL data_arr_pc[]):
   # return value in an array the farthest from 0
   INT ii;
   DBL maxaby;
   DBL amaxaby;
   DBL atemp;

   maxaby = data_arr_pc[0];
   amaxaby = ABS(maxaby);
   FOR ii FROM 1 TO nn - 1:
      atemp = ABS(data_arr_pc[ii]);
      IF amaxaby < atemp:
         maxaby = data_arr_pc[ii];
         amaxaby = atemp;
      IF_END
   FOR_END
   RETURN maxaby;
FUNC_END

FUNC DBL minabs(INT nn, READONLY DBL data_arr_pc[]):
   # return value in an array the closest to 0
   INT ii;
   DBL minaby;
   DBL aminaby;
   DBL atemp;

   minaby = data_arr_pc[0];
   aminaby = ABS(minaby);
   FOR ii FROM 1 TO nn - 1:
      atemp = ABS(data_arr_pc[ii]);
      IF atemp < aminaby:
         minaby = data_arr_pc[ii];
         aminaby = atemp;
      IF_END
   FOR_END
   RETURN minaby;
FUNC_END

FUNC DBL maxabsoffset(DBL offset, INT nn, READONLY DBL data_arr_pc[]):
   # return value in an array the farthest from OFFSET
   INT ii;
   DBL maxaby;
   DBL delta;

   maxaby = data_arr_pc[0] - offset;
   FOR ii FROM 1 TO nn - 1:
      delta = data_arr_pc[ii] - offset;
      IF ABS(maxaby) < ABS(delta):
         maxaby = delta;
      IF_END
   FOR_END
   RETURN maxaby + offset;
FUNC_END

FUNC DBL minabsoffset(DBL offset, INT nn, READONLY DBL data_arr_pc[]):
   # return value in an array the closest to OFFSET
   INT ii;
   DBL minaby;
   DBL delta;

   minaby = data_arr_pc[0] - offset;
   FOR ii FROM 1 TO nn - 1:
      delta = data_arr_pc[ii] - offset;
      IF ABS(delta) < ABS(minaby):
         minaby = delta;
      IF_END
   FOR_END
   RETURN minaby + offset;
FUNC_END

FUNC DBL mini(INT num, READONLY DBL data_arr_pc[]):
   # return the minimum value in an array
   DBL curr;
   DBL tmp;
   INT ii;

   curr = data_arr_pc[0];
   FOR ii FROM 1 TO num - 1:
      tmp = data_arr_pc[ii];
      IF tmp < curr:
         curr = tmp;
      IF_END
   FOR_END
   RETURN curr;
FUNC_END

FUNC DBL maxi(INT num, READONLY DBL data_arr_pc[]):
   # return the maximum value in an array
   DBL curr;
   DBL tmp;
   INT ii;

   curr = data_arr_pc[0];
   FOR ii FROM 1 TO num - 1:
      tmp = data_arr_pc[ii];
      IF curr < tmp:
         curr = tmp;
      IF_END
   FOR_END
   RETURN curr;
FUNC_END

FUNC DBL maxmin(INT num, READONLY DBL data_arr_pc[]
         , WRITEONLY DBL ret_maxmin_arr_p[]):
   # return the spread of the data
   #   RET_MAXMIN_ARR_p[0] = maximum
   #   RET_MAXMIN_ARR_p[1] = minimum
   DBL tmp;
   INT ii;
   DBL maxx;
   DBL minn;

   minn = data_arr_pc[0];
   maxx = data_arr_pc[0];
   FOR ii FROM 1 TO num - 1:
      tmp = data_arr_pc[ii];
      IF minn < tmp:
         minn = tmp;
      IF_END
      IF tmp < maxx:
         maxx = tmp;
      IF_END
   FOR_END
   ret_maxmin_arr_p[0] = maxx;
   ret_maxmin_arr_p[1] = minn;
   RETURN maxx - minn;
FUNC_END

FUNC DBL min2(DBL value_a, DBL value_b):
   # return the minimum of VALUE_A and VALUE_B
   DBL retvalu;

   IF value_a < value_b:
      retvalu = value_a;
   ELSE:
      retvalu = value_b;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL max2(DBL value_a, DBL value_b):
   # return the maximum of VALUE_A and VALUE_B
   DBL retvalu;

   IF value_b < value_a:
      retvalu = value_a;
   ELSE:
      retvalu = value_b;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL minabs2(DBL value_a, DBL value_b):
   # return VALUE_A or VALUE_B closest to 0

   DBL retvalu;

   IF ABS(value_a) < ABS(value_b):
      retvalu = value_a;
   ELSE:
      retvalu = value_b;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL maxabs2(DBL value_a, DBL value_b):
   # return VALUE_A or VALUE_B farthest from 0
   DBL retvalu;

   IF ABS(value_b) < ABS(value_a):
      retvalu = value_a;
   ELSE:
      retvalu = value_b;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL variance(INT nn, READONLY DBL xx_arr_pc[]):
   # the variance of the data in an array
   INT ii;
   DBL delta;
   DBL meanx;
   DBL variancex;

   meanx = 0.0;
   variancex = 0.0;
   FOR ii FROM 0 TO nn - 1:
      delta = xx_arr_pc[ii] - meanx;
      meanx += delta / (ii + 1.0);
      variancex += delta * (xx_arr_pc[ii] - meanx);
   FOR_END
   IF 2 <= nn:
      variancex /= (nn - 1.0);
   ELSE:
      variancex = 0.0;
   IF_END
   RETURN variancex;
FUNC_END

FUNC DBL mean(INT nn, READONLY DBL xx_arr_pc[]):
   # the mean of the values in an array
   INT ii;
   DBL delta;
   DBL meanx;

   meanx = 0.0;
   FOR ii FROM 0 TO nn - 1:
      delta = xx_arr_pc[ii] - meanx;
      meanx += delta / (ii + 1.0);
   FOR_END
   RETURN meanx;
FUNC_END
