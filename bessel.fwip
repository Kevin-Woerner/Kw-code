#    Copyright (C) 2017-2021 by Kevin D. Woerner
# 2021-04-20 kdw  var name change (mainly mm)
# 2021-04-15 kdw  indent work
# 2021-04-11 kdw  indent work
# 2021-04-09 kdw  indent work
# 2021-03-15 kdw  lx_.* const names
# 2021-03-13 kdw  line len upped to 77
# 2020-12-15 kdw  rmed useless file insert
# 2020-12-08 kdw  explicit module on consts
# 2020-12-03 kdw  float explicit const work
# 2020-11-28 kdw  macro syntax overhaul
# 2020-11-23 kdw  put + after E
# 2020-08-17 kdw  macro syntax changed
# 2020-07-27 kdw  block syntax
# 2020-07-24 kdw  comment cleanup
# 2020-07-12 kdw  sqrttwo const
# 2020-07-10 kdw  polynomial refactor
# 2020-07-01 kdw  tests modified
# 2020-06-30 kdw  tests changed
# 2020-06-16 kdw  comments changed
# 2020-05-20 kdw  rmed unneeded parens
# 2020-05-11 kdw  reorder; blocks added
# 2020-05-06 kdw  rmed boolean vars
# 2020-04-28 kdw  tweaks here and there
# 2020-04-23 kdw  const format change
# 2020-04-13 kdw  numeric inequality work
# 2020-04-12 kdw  comment change
# 2020-04-08 kdw  preprocess sigil change
# 2020-03-25 kdw  tests
# 2020-03-23 kdw  comment changed
# 2020-03-22 kdw  bes[s]Y1__1 func
# 2020-03-21 kdw  reorg
# 2020-03-20 kdw  func renamd
# 2020-03-17 kdw  un-simplified; logic errors fixed
# 2020-03-13 kdw  simplified
# 2020-03-11 kdw  RE[P]LACE work
# 2020-03-09 kdw  LO[C]AL_.* keywords
# 2020-03-06 kdw  RE[P]LACE / IN[D]EX changes
# 2020-03-05 kdw  keywords TR[U]EVAL, FAL[S]EVAL changed
# 2020-03-04 kdw  refactor
# 2020-03-03 kdw  comment changed:odd chars
# 2020-03-02 kdw  rmed unused code
# 2020-03-01 kdw  .*_NE[X]T deprecated, et al.
# 2020-02-28 kdw  poly eval work
# 2020-02-26 kdw  simplified
# 2020-02-19 kdw  comment change
# 2020-02-15 kdw  array comment change
# 2020-02-14 kdw  improving attempt
# 2019-12-31 kdw  func renam
# 2019-12-26 kdw  module name addded to funcs
# 2019-11-17 kdw  include Macros file
# 2019-10-04 kdw  comment change
# 2019-08-18 kdw  L[O]G to L[N]
# 2019-08-11 kdw  comment cleanup
# 2019-08-06 kdw  rmed backslashes, macro arg renam
# 2019-05-29 kdw  comment changed
# 2019-05-22 kdw  s/FU[N]CT[I]ON/FU[N]C/g
# 2019-05-01 kdw  consts explicit module name
# 2019-04-09 kdw  comment improvement
# 2019-03-19 kdw  re[t]_val to re[t]valu
# 2019-03-18 kdw  macro syntax changed
# 2019-03-11 kdw  comments to array dcls
# 2019-03-10 kdw  changed .*__1 funcs
# 2019-03-08 kdw  is[e]qual to is[e]q, et al.
# 2019-03-06 kdw  is.* funcs changed
# 2019-01-03 kdw  Await counter changed
# 2018-12-03 kdw  minor code reorg
# 2018-09-12 kdw  rmed unsed funcs
# 2018-07-20 kdw  funcs renam; refactor
# 2018-07-19 kdw  comments; array reformat
# 2018-07-14 kdw  float num format
# 2018-07-10 kdw  added "+" to exponents
# 2018-06-09 kdw  mved tests
# 2018-06-07 kdw  b[e]ssel_XX test more resolution
# 2018-06-06 kdw  b[e]ssel_y1 coeff fix
# 2018-05-17 kdw  ARR?AY.* and HOR[N]ER syntax
# 2018-05-16 kdw  AR?RAY syntax
# 2018-04-03 kdw  rm () from return
# 2018-04-02 kdw  Pro?totype, et al.
# 2017-11-26 kdw  FR[O]M and B[Y] keywords
# 2017-11-22 kdw  var renam
# 2017-11-21 kdw  FR[O]M
# 2017-10-23 kdw  array init syntax changed
# 2017-09-20 kdw  rmed useless trailing 0s
# 2017-08-31 kdw  REQ[U]IRES deletede
# 2017-05-03 kdw  PROT?OTYPE format changed
# 2017-04-28 kdw  b[e]ssel_[jy]v()
# 2017-04-26 kdw  backslashes
# 2017-04-24 kdw  y0, y02, y1, yn functions
# 2017-04-19 kdw  funciton keyword
# 2017-04-18 kdw  created

FUNC DBL bessJv(DBL vv, DBL xx):
   # Cylindrical Bessel function 1th kind Jv()
   # via power series
   DBL sum;
   DBL sum_prev;
   DBL term;
   DBL ff;
   DBL xxsqr_div_four;
   DBL avv;

   IF xx < 0.0:
      sum = 0.0;
   ELSE:
      avv = vv;
      IF Kw.isposint(-vv):
         avv = ABS(vv);
      IF_END
      xxsqr_div_four = (xx * xx / 4.0);
      term = POW(xx / 2.0, avv) / Kw.tgamma(avv + 1.0);

      sum = term;
      AWAIT Kw.iseq(sum, sum_prev) COUNT ff FROM 1:
         term *= -xxsqr_div_four / (ff * (avv + ff));
         sum_prev = sum;
         sum += term;
      AWAIT_END

      IF Kw.isposint(-vv) AND Kw.isodd(vv):
         sum = -sum;
      IF_END
   IF_END
   RETURN sum;
FUNC_END

FUNC DBL bessYv(DBL vv, DBL xx):
   # Cylindrical Bessel Function 2th kind Yv()
   DBL retvalu;
   DBL vvpi;

   IF Kw.isint(vv):
      retvalu = bessYn(vv, xx);
   ELSE:
      vvpi = Kw.PI * vv;
      retvalu = (COS(vvpi) * bessJv(vv, xx) - bessJv(-vv, xx)) / SIN(vvpi);
   IF_END

   RETURN retvalu;
FUNC_END

FUNC DBL bessI0(DBL xx):
   # Hyperbolical Bessel function 1th kind of 0th order
   # via polynomial approximation
   DBL yy;
   DBL retvalu;
   # From Pavel Holoborodko
   #   https://www.advanpix.com/2015/11/11/rational-approximations-for-the
   #      -modified-bessel-function-of-the-first-kind-i0-computations
   #      -double-precision/

   IF xx < 7.75:
      yy = xx * xx / 4.0;
      retvalu = (((((((((((((((((
               + 1.1497640034400735733456400E-29) * yy
               + 2.0732014503197852176921968E-27) * yy
               + 5.9203280572170548134753422E-25) * yy
               + 1.3141332422663039834197910E-22) * yy
               + 2.5791926805873898803749321E-20) * yy
               + 4.3583591008893599099577755E-18) * yy
               + 6.2760839879536225394314453E-16) * yy
               + 7.5940582595094190098755663E-14) * yy
               + 7.5940584360755226536109511E-12) * yy
               + 6.1511873265092916275099070E-10) * yy
               + 3.9367598891475388547279760E-08) * yy
               + 1.9290123456788994104574754E-06) * yy
               + 6.9444444444444568581891535E-05) * yy
               + 1.7361111111111110294015271E-03) * yy
               + 2.7777777777777777805664954E-02) * yy
               + 2.4999999999999999999629693E-01) * yy
               + 1.0000000000000000000000801E+00) * yy
               + 1.0;
   ELSE:
      yy = 1.0 / xx;
      retvalu = (((((((((((((((((((((((
               + 1.6069467093441596329340754E+16) * yy
               - 2.1363029690365351606041265E+16) * yy
               + 1.3012646806421079076251950E+16) * yy
               - 4.8049082153027457378879746E+15) * yy
               + 1.1989242681178569338129044E+15) * yy
               - 2.1323049786724612220362154E+14) * yy
               + 2.7752144774934763122129261E+13) * yy
               - 2.6632742974569782078420204E+12) * yy
               + 1.8592340458074104721496236E+11) * yy
               - 8.9270060370015930749184222E+09) * yy
               + 2.3518420447411254516178388E+08) * yy
               + 2.6092888649549172879282592E+06) * yy
               - 5.9355022509673600842060002E+05) * yy
               + 3.1275740782277570164423916E+04) * yy
               - 1.0026890180180668595066918E+03) * yy
               + 2.2725199603010833194037016E+01) * yy
               - 1.0699095472110916094973951E-01) * yy
               + 9.4085204199017869159183831E-02) * yy
               + 4.4718622769244715693031735E-02) * yy
               + 2.9219501690198775910219311E-02) * yy
               + 2.8050628884163787533196746E-02) * yy
               + 4.9867785050353992900698488E-02) * yy
               + 3.9894228040143265335649948E-01);
      retvalu *= EXP(xx) / SQRT(xx);
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL bessI1(DBL xx):
   # Hyperbolical Bessel function 1th kind of 1th order
   # via polynomial approximation
   DBL yy;
   DBL aa;
   DBL retvalu;

   IF xx < 7.75:
      yy = xx * xx / 4.0;
      aa = (((((((((((((
               + 1.332898928162290861E-23) * yy
               + 1.625212890947171108E-21) * yy
               + 3.410720494727771276E-19) * yy
               + 5.220157095351373194E-17) * yy
               + 6.904822652741917551E-15) * yy
               + 7.593969849687574339E-13) * yy
               + 6.834657311305621830E-11) * yy
               + 4.920949692800671435E-09) * yy
               + 2.755731926254790268E-07) * yy
               + 1.157407407354987232E-05) * yy
               + 3.472222222225921045E-04) * yy
               + 6.944444444444341983E-03) * yy
               + 8.333333333333333803E-02);
      retvalu = (((
               + aa) * yy
               + 0.5) * yy
               + 1.0) * xx / 2.0;
   ELSIF xx < 500.0:
      yy = 1.0 / xx;
      retvalu = ((((((((((((((((((((((
               - 2.213318202179221945E+15) * yy
               + 3.146401654361325073E+15) * yy
               - 2.067285045778906105E+15) * yy
               + 8.325554073334618015E+14) * yy
               - 2.298849639457172489E+14) * yy
               + 4.614040809616582764E+13) * yy
               - 6.967602516005787001E+12) * yy
               + 8.087824484994859552E+11) * yy
               - 7.313784438967834057E+10) * yy
               + 5.192386898222206474E+09) * yy
               - 2.903390398236656519E+08) * yy
               + 1.277677779341446497E+07) * yy
               - 4.404655582443487334E+05) * yy
               + 1.178785865993440669E+04) * yy
               - 2.426181371595021021E+02) * yy
               + 3.458284470977172076E+00) * yy
               - 1.528189554374492735E-01) * yy
               - 5.719036414430205390E-02) * yy
               - 4.090895951581637791E-02) * yy
               - 4.675104253598537322E-02) * yy
               - 1.496033551613111533E-01) * yy
               + 3.989422804014406054E-01) * EXP(xx) / SQRT(xx);
   ELSE:
      yy = 1.0 / xx;
      aa = EXP(xx / 2.0);
      retvalu = (((((
               - 5.843630344778927582E-02) * yy
               - 4.090421597376992892E-02) * yy
               - 4.675105322571775911E-02) * yy
               - 1.496033551467584157E-01) * yy
               + 3.989422804014314820E-01) * aa / SQRT(xx);
      retvalu *= aa;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL bessK0(DBL arg):
   # Hyperbolical Bessel function 2th kind of 0th order
   # via polynomial approximation
   DBL retvalu;
   DBL sumf;
   DBL sumg;
   DBL sump;
   DBL sumq;
   DBL xx;
   DBL xz;

   xx = arg;
   IF xx <= 0.0:
      retvalu = Kw.DBLMAX;
   ELSIF xx < Kw.DBLEPS:
      retvalu = 0.11593151565841244858684731328185 - LN(xx);
   ELSIF xx <= 1.0:
      xz = xx * xx;
      sump = (((((
               + 5.8599221412826100000E-04) * xz
               + 1.3166052564989571850E-01) * xz
               + 1.1999463724910714109E+01) * xz
               + 4.6850901201934832188E+02) * xz
               + 5.9169059852270512312E+03) * xz
               + 2.4708152720399552679E+03;
      sumq = ((
               + 1.0) * xz
               - 2.4994418972832303646E+02) * xz
               + 2.1312714303849120380E+04;
      sumf = (((
               - 1.6414452837299064100E+00) * xz
               - 2.9601657892958843866E+02) * xz
               - 1.7733784684952985886E+04) * xz
               - 4.0320340761145482298E+05;
      sumg = ((1.0 * xz
               - 2.5064972445877992730E+02) * xz
               + 2.9865713163054025489E+04) * xz
               - 1.6128136304458193998E+06;
      retvalu = sump / sumq - LN(xx) * (xz * sumf / sumg + 1.0);
   ELSIF xx < Kw.DBLMAXLN:
      xz = 1.0 / xx;
      sump = (((((((((
               + 1.1394980557384778174E+02) * xz
               + 3.6832589957340267940E+03) * xz
               + 3.1075408980684392399E+04) * xz
               + 1.0577068948034021957E+05) * xz
               + 1.7398867902565686251E+05) * xz
               + 1.5097646353289914539E+05) * xz
               + 7.1557062783764037541E+04) * xz
               + 1.8321525870183537725E+04) * xz
               + 2.3444738764199315021E+03) * xz
               + 1.1600249425076035558E+02;
      sumq = ((((((((((
               + 1.0) * xz
               + 2.0013443064949242491E+02) * xz
               + 4.4329628889746408858E+03) * xz
               + 3.1474655750295278825E+04) * xz
               + 9.7418829762268075784E+04) * xz
               + 1.5144644673520157801E+05) * xz
               + 1.2689839587977598727E+05) * xz
               + 5.8824616785857027752E+04) * xz
               + 1.4847228371802360957E+04) * xz
               + 1.8821890840982713696E+03) * xz
               + 9.2556599177304839811E+01;
      retvalu = sump / sumq / SQRT(xx) * EXP(-xx);
   ELSE:
      retvalu = 0.0;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL bessK1(DBL arg):
   # Hyperbolical Bessel function 2th kind of 1th order
   # via polynomial approximation
   DBL retvalu;
   DBL sumf;
   DBL sumg;
   DBL sump;
   DBL sumq;
   DBL xx;
   DBL xz;

   xx = arg;
   IF xx < Kw.DBLEPS:
      retvalu = Kw.DBLMAX;
   ELSIF xx < Kw.DBLEPS:
      retvalu = 1.0 / xx;
   ELSIF xx <= 1.0:
      xz = xx * xx;
      sump = (((((
               + 4.8127070456878442310E-1) * xz
               + 9.9991373567429309922E+1) * xz
               + 7.1885382604084798576E+3) * xz
               + 1.7733324035147015630E+5) * xz
               + 7.1938920065420586101E+5) * xz
               - 2.2149374878243304548E+6;
      sumq = (((
               + 1.0) * xz
               - 2.8143915754538725829E+2) * xz
               + 3.7264298672067697862E+4) * xz
               - 2.2149374878243304548E+6;
      sumf = ((((
               - 2.2795590826955002390E-1) * xz
               - 5.3103913335180275253E+1) * xz
               - 4.5051623763436087023E+3) * xz
               - 1.4758069205414222471E+5) * xz
               - 1.3531161492785421328E+6;
      sumg = (((
               + 1.0) * xz
               - 3.0507151578787595807E+2) * xz
               + 4.3117653211351080007E+4) * xz
               - 2.7062322985570842656E+6;
      retvalu = (xz * LN(xx) * sumf / sumg + sump / sumq) / xx;
   ELSIF xx < Kw.DBLMAXLN:
      xz = 1.0 / xx;
      sump = ((((((((((
               + 6.4257745859173138767E-2) * xz
               + 7.5584584631176030810E+0) * xz
               + 1.3182609918569941308E+2) * xz
               + 8.1094256146537402173E+2) * xz
               + 2.3123742209168871550E+3) * xz
               + 3.4540675585544584407E+3) * xz
               + 2.8590657697910288226E+3) * xz
               + 1.3319486433183221990E+3) * xz
               + 3.4122953486801312910E+2) * xz
               + 4.4137176114230414036E+1) * xz
               + 2.2196792496874548962E+0;
      sumq = (((((((((
               + 1.0) * xz
               + 3.6001069306861518855E+1) * xz
               + 3.3031020088765390854E+2) * xz
               + 1.2082692316002348638E+3) * xz
               + 2.1181000487171943810E+3) * xz
               + 1.9448440788918006154E+3) * xz
               + 9.6929165726802648634E+2) * xz
               + 2.5951223655579051357E+2) * xz
               + 3.4552228452758912848E+1) * xz
               + 1.7710478032601086579E+0;
      retvalu = sump / sumq / SQRT(xx);
      retvalu = retvalu * EXP(-xx);
   ELSE:
      retvalu = 0.0;
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL bessJn_ps(INT nn, DBL xx):
   # Cylindrical Bessel function 1th kind of integer order
   # via power series
   DBL sum;
   DBL sum_prev;
   DBL term;
   DBL ff;
   DBL xxsqr_div_four;
   INT ann;

   IF nn < 0:
      ann = -nn;
   ELSE:
      ann = nn;
   IF_END
   term = POW(xx / 2.0, ann) / Kw.factorial(ann);
   xxsqr_div_four = -(xx * xx / 4.0);
   sum = term;

   AWAIT Kw.iseq(sum, sum_prev) COUNT ff FROM 1:
      term *= xxsqr_div_four / (ff * (ann + ff));
      sum_prev = sum;
      sum += term;
   AWAIT_END

   IF nn < 0 AND Kw.isodd(nn):
      sum = -sum;
   IF_END

   RETURN sum;
FUNC_END

FUNC DBL bessIn_ps(INT nn, DBL xx):
   # Hyperbolical Bessel function 1th kind of integer order
   # via power series
   DBL sum;
   DBL sum_prev;
   DBL term;
   DBL ff;
   DBL xxsqr_div_four;
   INT ann;

   IF nn < 0:
      ann = -nn;
   ELSE:
      ann = nn;
   IF_END
   term = POW(xx / 2.0, ann) / Kw.factorial(ann);
   xxsqr_div_four = xx * xx / 4.0;
   sum = term;

   AWAIT Kw.iseq(sum, sum_prev) COUNT ff FROM 1:
      term *= xxsqr_div_four / (ff * (ann + ff));
      sum_prev = sum;
      sum += term;
   AWAIT_END

   RETURN sum;
FUNC_END

BLOCK:
   BLOCK_DEF FUNC DBL lf_besucjy0_xge5(DBL xx, INT jfunc):
      DBL ww;
      DBL pp;
      DBL qq;
      DBL zz;
      DBL xn;
      DBL denom;
      DBL numer;

      ww = 5.0 / xx;
      zz = 25.0 / (xx * xx);
      numer = (((((((
               + 7.96936729297347051624E-4) * zz
               + 8.28352392107440799803E-2) * zz
               + 1.23953371646414299388E+0) * zz
               + 5.44725003058768775090E+0) * zz
               + 8.74716500199817011941E+0) * zz
               + 5.30324038235394892183E+0) * zz
               + 9.99999999999999997821E-1);
      denom = (((((((
               + 9.24408810558863637013E-4) * zz
               + 8.56288474354474431428E-2) * zz
               + 1.25352743901058953537E+0) * zz
               + 5.47097740330417105182E+0) * zz
               + 8.76190883237069594232E+0) * zz
               + 5.30605288235394617618E+0) * zz
               + 1.00000000000000000218E+0);
      pp = numer /denom;
      numer = ((((((((
               - 1.13663838898469149931E-2) * zz
               - 1.28252718670509318512E+0) * zz
               - 1.95539544257735972385E+1) * zz
               - 9.32060152123768231369E+1) * zz
               - 1.77681167980488050595E+2) * zz
               - 1.47077505154951170175E+2) * zz
               - 5.14105326766599330220E+1) * zz
               - 6.05014350600728481186E+0);
      denom = ((((((((
               + 1.0) * zz
               + 6.43178256118178023184E+1) * zz
               + 8.56430025976980587198E+2) * zz
               + 3.88240183605401609683E+3) * zz
               + 7.24046774195652478189E+3) * zz
               + 5.93072701187316984827E+3) * zz
               + 2.06209331660327847417E+3) * zz
               + 2.42005740240291393179E+2);
      qq = numer / denom;
      xn = xx - Kw.PI / 4.0;
      IF jfunc < 1:
         pp = pp * COS(xn) - ww * qq * SIN(xn);
      ELSE:
         pp = pp * SIN(xn) + ww * qq * COS(xn);
      IF_END
      RETURN pp * Kw.TWOSQRT / SQRT(Kw.PI * xx);
   FUNC_END

   BLOCK_DEF FUNC DBL lf_besucjy1_xge5(DBL xx, INT jfunc):
      DBL ww;
      DBL pp;
      DBL qq;
      DBL zz;
      DBL xn;
      DBL denom;
      DBL numer;

      ww = 5.0 / xx;
      zz = 25.0 / (xx * xx);
      numer = (((((((
               + 7.62125616208173112003E-4) * zz
               + 7.31397056940917570436E-2) * zz
               + 1.12719608129684925192E+0) * zz
               + 5.11207951146807644818E+0) * zz
               + 8.42404590141772420927E+0) * zz
               + 5.21451598682361504063E+0) * zz
               + 1.00000000000000000254E+0);
      denom = (((((((
               + 5.71323128072548699714E-4) * zz
               + 6.88455908754495404082E-2) * zz
               + 1.10514232634061696926E+0) * zz
               + 5.07386386128601488557E+0) * zz
               + 8.39985554327604159757E+0) * zz
               + 5.20982848682361821619E+0) * zz
               + 9.99999999999999997461E-1);
      pp = numer /denom;

      numer = ((((((((
               + 5.10862594750176621635E-2) * zz
               + 4.98213872951233449420E+0) * zz
               + 7.58238284132545283818E+1) * zz
               + 3.66779609360150777800E+2) * zz
               + 7.10856304998926107277E+2) * zz
               + 5.97489612400613639965E+2) * zz
               + 2.11688757100572135698E+2) * zz
               + 2.52070205858023719784E+1);
      denom = ((((((((
               + 1.0) * zz
               + 7.42373277035675149943E+1) * zz
               + 1.05644886038262816351E+3) * zz
               + 4.98641058337653607651E+3) * zz
               + 9.56231892404756170795E+3) * zz
               + 7.99704160447350683650E+3) * zz
               + 2.82619278517639096600E+3) * zz
               + 3.36093607810698293419E+2);
      qq = numer / denom;

      xn = xx - 3.0 * Kw.PI / 4.0;
      IF jfunc < 1:
         pp = pp * COS(xn) - ww * qq * SIN(xn);
      ELSE:
         pp = pp * SIN(xn) + ww * qq * COS(xn);
      IF_END
      RETURN pp * Kw.TWOSQRT / SQRT(Kw.PI * xx);
   FUNC_END

   FUNC DBL bessJ0(DBL xx):
      # Cylindrical Bessel function 1th kind of 0th order
      # via rational polynomial approximation
      DBL zz;
      DBL denom;
      DBL numer;
      DBL retvalu;

      IF xx < 0.0:
         xx = - xx;
      IF_END
      zz = xx * xx;
      IF xx < 1.0E-5:
         retvalu = 1.0 - zz / 4.0;
      ELSIF xx < 5.0:
         numer = ((((
                  - 4.79443220978201773821E+9) * zz
                  + 1.95617491946556577543E+12) * zz
                  - 2.49248344360967716204E+14) * zz
                  + 9.70862251047306323952E+15);
         denom = (((((((((
                  + 1.0) * zz
                  + 4.99563147152651017219E+2) * zz
                  + 1.73785401676374683123E+5) * zz
                  + 4.84409658339962045305E+7) * zz
                  + 1.11855537045356834862E+10) * zz
                  + 2.11277520115489217587E+12) * zz
                  + 3.10518229857422583814E+14) * zz
                  + 3.18121955943204943306E+16) * zz
                  + 1.71086294081043136091E+18);

         # these are the squares of the first two zeroes of J0
         retvalu = (zz - 5.783185962946784521175)
                  * (zz - 30.4712623436620863991) * numer / denom;
      ELSE:
         retvalu = lf_besucjy0_xge5(xx, 0);
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessJ1(DBL xx):
      # Cylindrical Bessel function 1th kind of 1th order
      # via rational polynomial approximation
      DBL ww;
      DBL zz;
      DBL denom;
      DBL numer;
      DBL retvalu;

      ww = xx;
      IF ww < 0.0:
         ww = -ww;
      IF_END
      IF ww < 5.0:
         zz = ww * ww;
         numer = ((((
                  - 8.99971225705559398224E+8) * zz
                  + 4.52228297998194034323E+11) * zz
                  - 7.27494245221818276015E+13) * zz
                  + 3.68295732863852883286E+15);
         denom = (((((((((
                  + 1.0) * zz
                  + 6.20836478118054335476E+2) * zz
                  + 2.56987256757748830383E+5) * zz
                  + 8.35146791431949253037E+7) * zz
                  + 2.21511595479792499675E+10) * zz
                  + 4.74914122079991414898E+12) * zz
                  + 7.84369607876235854894E+14) * zz
                  + 8.95222336184627338078E+16) * zz
                  + 5.32278620332680085395E+18);
         retvalu = numer / denom * xx
                  * (zz - 14.6819706421238932572)
                  * (zz - 49.2184563216946036703);
      ELSE:
         retvalu = lf_besucjy1_xge5(xx, 0);
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessY0(DBL xx):
      # Cylindrical Bessel function 2th kind of 0th order
      # via rational polynomial approximation
      DBL zz;
      DBL denom;
      DBL numer;
      DBL retvalu;

      IF xx <= 0.0:
         retvalu = Kw.DBLMAX;
      ELSE:
         zz = xx * xx;
         IF xx < 1.0E-5:
            retvalu = 1.0 - zz / 4.0;
         ELSIF xx < 5.0:
            numer = ((((((((
                     + 1.55924367855235737965E+4) * zz
                     - 1.46639295903971606143E+7) * zz
                     + 5.43526477051876500413E+9) * zz
                     - 9.82136065717911466409E+11) * zz
                     + 8.75906394395366999549E+13) * zz
                     - 3.46628303384729719441E+15) * zz
                     + 4.42733268572569800351E+16) * zz
                     - 1.84950800436986690637E+16);
            denom = ((((((((
                     + 1.0) * zz
                     + 1.04128353664259848412E+3) * zz
                     + 6.26107330137134956842E+5) * zz
                     + 2.68919633393814121987E+8) * zz
                     + 8.64002487103935000337E+10) * zz
                     + 2.02979612750105546709E+13) * zz
                     + 3.17157752842975028269E+15) * zz
                     + 2.50596256172653059228E+17);
            retvalu = numer / denom
                     + 2.0 * LN(xx) * bessJ0(xx) / Kw.PI;
         ELSE:
            retvalu = lf_besucjy0_xge5(xx, 1);
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessY1(DBL xx):
      # Cylindrical Bessel function 2th kind of 1th order
      # via rational polynomial approximation
      DBL ww;
      DBL zz;
      DBL denom;
      DBL numer;
      DBL retvalu;

      ww = xx;
      IF xx <= 0.0:
         retvalu = -Kw.DBLMAX;
      ELSIF ww <= 5.0:
         zz = ww * ww;
         numer = ((((((
                  + 1.2632047479017802640E+9) * zz
                  - 6.47355876379160291031E+11) * zz
                  + 1.14509511541823727583E+14) * zz
                  - 8.12770255501325109621E+15) * zz
                  + 2.02439475713594898196E+17) * zz
                  - 7.78877196265950026825E+17);
         denom = (((((((((
                  + 1.0) * zz
                  + 5.94301592346128195359E+2) * zz
                  + 2.35564092943068577943E+5) * zz
                  + 7.34811944459721705660E+7) * zz
                  + 1.87601316108706159478E+10) * zz
                  + 3.88231277496238566008E+12) * zz
                  + 6.20557727146953693363E+14) * zz
                  + 6.87141087355300489866E+16) * zz
                  + 3.97270608116560655612E+18);

         retvalu = xx * numer / denom
                  + 2.0 * (bessJ1(xx) * LN(xx) - 1.0 / xx) / Kw.PI;
      ELSE:
         retvalu = lf_besucjy1_xge5(xx, 1);
      IF_END
      RETURN retvalu;
   FUNC_END
BLOCK_END

BLOCK: # define bessel ucrecur
   BLOCK_DEF FUNC DBL lf_bess_ucrecur(INT nn
            , DBL xx
            , DBL fzero
            , DBL fone):
      # Let Zn be either bessYn or bessJn
      # Zn(NN+1, XX) = 2*NN*Zn(NN, XX) / XX - Zn(NN-1, XX)
      DBL av;
      DBL bv;
      DBL cv;
      DBL tox;
      INT ii;

      IF nn <= 0:
         cv = fzero;
      ELSIF nn == 1:
         cv = fone;
      ELSE:
         tox = 2.0 / xx;
         av = fzero;
         bv = fone;
         FOR ii FROM 1 TO nn - 1:
            cv = tox * ii * bv - av;
            av = bv;
            bv = cv;
         FOR_END
      IF_END
      RETURN cv;
   FUNC_END

   BLOCK_DEF FUNC INT lf_limi(INT nn):
      RETURN nn + FLOOR(SQRT(40.0 * nn));
   FUNC_END

   BLOCK_DEF FUNC DBL lf_bess_ucrecur2(INT nn
            , DBL xx):
      DBL tox;
      DBL bzp;
      DBL bzc;
      DBL bzm;
      DBL sjm;
      INT jj;
      INT flipflop;
      INT limi;
      DBL retvalu;

      flipflop = 0;
      sjm = 0.0;
      tox = 2.0 / ABS(xx);
      retvalu = 0.0;
      bzp = 0.0;
      bzc = 1.0;
      limi = lf_limi(nn);
      IF Kw.isodd(limi):
         limi -= 1;
      IF_END
      FOR jj FROM limi TO 1 BY -1:
         bzm = jj * tox * bzc - bzp;
         bzp = bzc;
         bzc = bzm;
         IF flipflop == 0:
            flipflop = 1;
         ELSE:
            sjm += bzc;
            flipflop = 0;
         IF_END
         IF jj == nn:
            retvalu = bzp;
         IF_END
      FOR_END
      sjm = 2.0 * sjm - bzc;
      retvalu /= sjm;
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessIn(INT nn, DBL xx):
      # Hyperbolical Bessel function 1th kind of integer order
      INT jj;
      INT limi;
      DBL bzc;
      DBL bzm;
      DBL bzp;
      DBL tox;
      DBL retvalu;
      DBL axx;

      IF nn < 0 OR Kw.iszero(xx):
         retvalu = 0.0;
      ELSIF nn == 0:
         axx = ABS(xx);
         retvalu = bessI0(axx);
      ELSIF nn == 1:
         axx = ABS(xx);
         retvalu = bessI1(axx);
      ELSE:
         tox = 2.0 / ABS(xx);
         retvalu = 0.0;
         bzp = 0.0;
         bzc = 1.0;
         limi = 2 * lf_limi(nn);
         FOR jj FROM limi TO 1 BY -1:
            bzm = bzp + jj * tox * bzc;
            bzp = bzc;
            bzc = bzm;
            IF jj == nn:
               retvalu = bzp;
            IF_END
         FOR_END
         retvalu *= bessI0(xx) / bzc;
      IF_END
      IF xx < 0.0 AND Kw.isodd(nn):
         retvalu = -retvalu;
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessJn(INT nn, DBL xx):
      # Cylindrical Bessel function 1th kind of integer order
      DBL retvalu;

      IF nn == 0:
         retvalu = bessJ0(xx);
      ELSIF nn == 1:
         retvalu = bessJ1(xx);
      ELSIF nn < ABS(xx):
         retvalu = lf_bess_ucrecur(nn
                  , xx, bessJ0(xx), bessJ1(xx));
      ELSE:
         retvalu = lf_bess_ucrecur2(nn, xx);
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessYn(INT nn, DBL xx):
      # Cylindrical Bessel function 2th kind of integer order
      DBL retvalu;

      IF nn == 0:
         retvalu = bessY0(xx);
      ELSIF nn == 1:
         retvalu = bessY1(xx);
      ELSE:
         retvalu = lf_bess_ucrecur(nn
                  , xx, bessY0(xx), bessY1(xx));
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessKn(INT nn, DBL xx):
      # Hyperbolical Bessel function 2th kind of integer order
      DBL retvalu;

      IF nn < 0 OR Kw.iszero(xx):
         retvalu = 0.0;
      ELSIF nn == 0:
         retvalu = bessK0(xx);
      ELSIF nn == 1:
         retvalu = bessK1(xx);
      ELSE:
         retvalu = lf_bess_ucrecur(nn, xx
                  , bessK0(xx)
                  , bessK1(xx));
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bessYn_ps(INT nn, DBL xx):
      # Cylindrical Bessel function 2th kind of integer order
      # Based on the recurrrence relation
      #    Yn(N+1,XX) = 2N * Yn(N,XX) / XX - Yn(N-1,XX)
      DBL retvalu;
      DBL sum;
      DBL sum_prev;
      DBL term;
      DBL hn;
      DBL kk;
      DBL xxsqr_div_four;

      IF nn < 0 OR Kw.iszero(xx):
         retvalu = 0.0;
      ELSIF nn == 0:
         xxsqr_div_four = xx * xx / 4.0;
         sum = (LN(xx / 2.0) + Kw.EULER) * bessJn(0, xx);
         term = -1;
         hn = 0.0;
         AWAIT Kw.iseq(sum, sum_prev) COUNT kk FROM 1:
            hn += 1.0 / kk;
            term *= -xxsqr_div_four / (kk * kk);
            sum_prev = sum;
            sum += term * hn;
         AWAIT_END

         retvalu = 2.0 * sum / Kw.PI;
      ELSIF nn == 1:
         retvalu = bessY1(xx);
      ELSE:
         retvalu = lf_bess_ucrecur(nn
                  , xx, bessY0(xx), bessY1(xx));
      IF_END
      RETURN retvalu;
   FUNC_END
BLOCK_END  # define bessel ucrecur

FUNC DBL bessY1__1(DBL xx):
   # Cylindrical Bessel Function 2th kind of 1th order
   # via rational polynomial approximationn
   DBL numer;
   DBL denom;
   DBL zz;
   DBL ww;
   DBL yy;
   DBL retvalu;

   IF Kw.iszero(xx):
      retvalu = -Kw.DBLMAX;
   ELSIF xx < 8.0:
      # Different rational polynomial approximations are used
      #   on the intervals (0,8) and [8,Inf)
      # REFERENCES:
      #   M. Abramowitz, I.A. Stegun
      #      Handbook Of Mathematical Functions, 1965.
      #   C.W. Clenshaw
      #      National Physical Laboratory Mathematical Tables
      #      VOL.5, 1962.
      yy = xx * xx;
      numer = ((((((
               + 8.511937935E+3) * yy
               - 4.237922726E+6) * yy
               + 7.349264551E+8) * yy
               - 5.153438139E+10) * yy
               + 1.275274390E+12) * yy
               - 4.900604943E+12);

      denom = (((((((
               + 1.0) * yy
               + 3.549632885E+2) * yy
               + 1.020426050E+5) * yy
               + 2.245904002E+7) * yy
               + 3.733650367E+9) * yy
               + 4.244419664E+11) * yy
               + 2.499580570E+13);

      retvalu = 2.0 * (bessJn(1, xx) * LN(xx) - 1.0 / xx) / Kw.PI
               + xx * (numer / denom);
   ELSE:
      zz = 8.0 / xx;
      yy = zz * zz;
      numer = (((((
               -2.403370190E-7) * yy
               +2.457520174E-6) * yy
               -3.516396496E-5) * yy
               +1.831050000E-3) * yy
               +1.0);

      denom = (((((
               + 1.057874120E-7) * yy
               - 8.822898700E-7) * yy
               + 8.449199096E-6) * yy
               - 2.002690873E-4) * yy
               + 4.687499995E-2);

      ww = xx - 0.75 * Kw.PI;
      retvalu = Kw.TWOSQRT / SQRT(Kw.PI * xx)
               * (SIN(ww) * numer + zz * COS(ww) * denom);
   IF_END
   RETURN retvalu;
FUNC_END

BLOCK: # define bessel lcrecur
   BLOCK_DEF FUNC DBL lf_bess_lcrecur(INT nn
            , DBL xx
            , DBL fzero
            , DBL fone):
      # Let zn be either bess_jn or bess_yn
      # jn(NN+1, XX) = (2*NN+1) * jn(NN, XX) / XX  - jn(NN-1, XX)
      DBL av;
      DBL bv;
      DBL cv;
      INT ii;

      IF nn <= 0:
         cv = fzero;
      ELSIF nn == 1:
         cv = fone;
      ELSE:
         av = fzero;
         bv = fone;
         FOR ii FROM 1 TO nn - 1:
            cv = (2.0 * ii + 1.0) * bv / xx - av;
            av = bv;
            bv = cv;
         FOR_END
      IF_END
      RETURN cv;
   FUNC_END

   FUNC DBL bess_jn(INT nn, DBL xx):
      # Spherical Bessel function 1th kind of integer order
      # Based on the recurrrence relation
      #    Jn(N+1,XX) = 2N * Jn(N,XX) / XX - Jn(N-1,XX)
      DBL retvalu;
      DBL jk_a;
      DBL jk_b;

      IF Kw.iszero(xx):
         IF nn == 0:
            retvalu = 1.0;
         ELSE:
            retvalu = 0.0;
         IF_END
      ELSE:
         jk_a = SIN(xx) / xx; # bess_j0(xx)
         jk_b = (SIN(xx) - xx * COS(xx)) / (xx * xx); # lcj1(xx)
         IF nn <= 0:
            retvalu = jk_a;
         ELSIF nn <= 1:
            retvalu = jk_b;
         ELSE:
            retvalu = lf_bess_lcrecur(nn, xx, jk_a, jk_b);
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END

   FUNC DBL bess_yn(INT nn, DBL xx):
      # Spherical Bessel function 2th kind of integer order
      DBL retvalu;
      DBL yk_a;
      DBL yk_b;

      IF Kw.iszero(xx):
         IF nn == 0:
            retvalu = 1.0;
         ELSE:
            retvalu = 0.0;
         IF_END
      ELSE:
         yk_a = -COS(xx) / xx; # bess_y0(xx)
         yk_b = (-COS(xx) - xx * SIN(xx)) / (xx * xx); # lcy1(xx)
         IF nn <= 0:
            retvalu = yk_a;
         ELSIF nn <= 1:
            retvalu = yk_b;
         ELSE:
            retvalu = lf_bess_lcrecur(nn, xx, yk_a, yk_b);
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END
BLOCK_END # define bessel lcrecur

#TEST:bessJn(0,5)    ==-0.17759677131433830434739701307475871107;
#TEST:bessJn(1,5)    ==-0.32757913759146522203773432191016913276;
#TEST:bessJn(10,5)   ==0.00146780264731047413110753223260662702;
#TEST:bessJn(10,9)   ==0.12469409282831672203113667647612904039;
#TEST:bessJn(3,5)    ==0.36483123061366699446357694935872197913;
#TEST:bessJn(3,9)    ==-0.18093519033665684004269704611853713381;
#TEST:bessJn(7,5)    ==0.05337641015589071543068731454162964583;
#TEST:bessJn(7,9)    ==0.32746087924245292511589576597394823065;
#TEST:bessJv(10.2,10)==0.1893485360342877215129;
#TEST:bessYn(0,5)    ==-0.3085176252490337800737;
#TEST:bessYn(1,5)    ==0.1478631433912268448011;
#TEST:bessYn(10,5)   ==-25.12911009561009673738;
#TEST:bessYn(10,9)   ==-0.545464485725335449017;
#TEST:bessYv(10.2,10)==-0.38951921431588599144;
#TEST:bess_jn(10,10) ==0.0646051544925642642714;
#TEST:bess_yn(10,10) ==-0.1724536720880578488518;
#TEST:bess_jn(0,0.5) ==2*sin(0.5);
#TEST:bess_jn(0,1)   ==sin(1);
#TEST:bess_jn(1,1)   ==sin(1)-cos(1);
#TEST:bess_jn(1,2)   ==sin(2)/4-cos(2)/2;
#TEST:bess_yn(0,0.5) ==-2*cos(0.5);
#TEST:bess_yn(0,1)   ==-cos(1);
#TEST:bess_yn(1,1)   ==-sin(1)-cos(1);
#TEST:bess_yn(1,2)   ==-cos(2)/4-sin(2)/2;
