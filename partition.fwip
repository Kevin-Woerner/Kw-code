#    Copyright (C) 2017-2021 by Kevin D. Woerner
# 2021-04-20 kdw  var name change (mainly mm)
# 2021-03-27 kdw  long lines update
# 2021-03-05 kdw  test lines reworked
# 2020-12-04 kdw  float explicit const work
# 2020-07-27 kdw  block syntax
# 2020-07-24 kdw  comment cleanup
# 2020-06-22 kdw  local-use mved before var decls
# 2020-06-03 kdw  writeonly keyword
# 2020-05-11 kdw  local-decl syntx change
# 2020-04-15 kdw  funcs ret doubles
# 2020-04-14 kdw  tests
# 2020-04-12 kdw  comment change
# 2020-03-09 kdw  LO[C]AL_.* keywords
# 2020-03-03 kdw  comment changed:odd chars
# 2020-03-02 kdw  s/_N[E]XT/_E[N]D/; indent block
# 2019-12-27 kdw  eplicit K[w] module
# 2019-12-26 kdw  module name added to funcs
# 2019-10-04 kdw  comment change
# 2019-08-06 kdw  rmed backslashes, macro arg renam
# 2019-05-28 kdw  comment changed
# 2019-05-24 kdw  local replaced private
# 2019-05-22 kdw  s/FU[N]CT[I]ON/FU[N]C/g
# 2019-03-19 kdw  re[t]_val to re[t]valu
# 2018-05-14 kdw  BLO?CK syntax change
# 2018-04-26 kdw  comment change
# 2018-04-24 kdw  func descriptions; BL?OCKs
# 2018-04-03 kdw  rm () from return
# 2018-04-02 kdw  Pro?totype, et al.
# 2017-07-03 kdw  rmed useless comments
# 2017-05-03 kdw  PROT?OTYPE format changed
# 2017-04-30 kdw  func to function
# 2017-04-11 kdw  created

BLOCK: # partition function
   BLOCK_DEF DBL lv_partitionr_arr[0];
   BLOCK_DEF INT lv_partitionr_end = 0;

   FUNC DBL partition(INT nn):
      # number of partitions of NN
      # E.g. partition(5) = 7 since 5 ==
      #    1+1+1+1+1, 1+1+1+2, 1+1+3, 1+4,
      #    1+2+2, 2+3, and 5
      # PARTITION(nn) = 0
      #      + PARTITION(NN -  1) + PARTITION(NN -  1 - 1)
      #      - PARTITION(NN -  5) - PARTITION(NN -  5 - 2)
      #      + PARTITION(NN - 12) + PARTITION(NN - 12 - 3)
      #      - PARTITION(NN - 22) - PARTITION(NN - 22 - 4)
      #      + PARTITION(NN - 35) + PARTITION(NN - 35 - 5)
      #      - PARTITION(NN - 51) - PARTITION(NN - 51 - 6) ...
      # where 1,5,12,22,35 comes from (3*kk*kk-kk) / 2
      #       1, 2, 5, 7, 12, 15, 22, 26, 35, 40, 51, 57
      #        +1 +3 +2 +5  +3  +7  +4  +9  +5  +11 +6
      BLOCK_USE lv_partitionr_arr[];
      BLOCK_USE lv_partitionr_end;
      DBL retvalu;
      INT jj;
      INT ii;
      INT kk;
      DBL sum;
      DBL ssign;

      IF nn < 0:
         retvalu = 0.0;
      ELSE:
         IF lv_partitionr_end <= 0:
            lv_partitionr_end = 6;
            REDIM lv_partitionr_arr[], lv_partitionr_end;
            lv_partitionr_arr[0] = 1.0;
            lv_partitionr_arr[1] = 1.0;
            lv_partitionr_arr[2] = 2.0;
            lv_partitionr_arr[3] = 3.0;
            lv_partitionr_arr[4] = 5.0;
            lv_partitionr_arr[5] = 7.0;
         IF_END

         IF lv_partitionr_end <= nn:
            ii = lv_partitionr_end;
            lv_partitionr_end = nn + 1;
            REDIM lv_partitionr_arr[], lv_partitionr_end;
            WHILE ii < lv_partitionr_end:
               sum = 0.0;
               ssign = 1.0;
               kk = 1;
               jj = ii - 1;
               WHILE 0 <= jj:
                  sum += ssign * lv_partitionr_arr[jj];
                  jj -= kk;
                  IF jj < 0:
                     WHILE_EXIT;
                  IF_END
                  sum += ssign * lv_partitionr_arr[jj];
                  ssign = -ssign;
                  kk += 1;
                  jj -= (2 * kk - 1);
               WHILE_END
               lv_partitionr_arr[ii] = sum;
               ii += 1;
            WHILE_END
         IF_END
         retvalu = lv_partitionr_arr[nn];
      IF_END

      RETURN retvalu;
   FUNC_END
BLOCK_END # partition function
#TEST:partition(30) == 5604

BLOCK: # partitionq function
   BLOCK_DEF DBL lv_partitionq_arr[0];
   BLOCK_DEF INT lv_partitionq_end = 0;

   FUNC DBL partitionq(INT nn):
      # number of partitions of NN into distinct parts
      # == number of partitions of NN into odd parts
      # E.G.: partitionq(8) = 6 since:
      #    one can partition 8 into distinct parts 6 ways:
      #       1+2+5, 1+3+4, 1+7, 2+6, 3+5, 8,
      #    and one can partition 8 into odd parts 6 ways:
      #       1+1+1+1+1+1+1+1, 1+1+1+1+1+3,
      #       1+1+3+3, 1+1+1+5, 1+7, 3+5
      BLOCK_USE lv_partitionq_arr[];
      BLOCK_USE lv_partitionq_end;
      DBL retvalu;
      INT jj;
      INT ii;
      INT kk;
      DBL sum;
      DBL ssign;
      INT ee;

      IF nn < 0:
         retvalu = 0.0;
      ELSE:
         IF lv_partitionq_end <= 0:
            lv_partitionq_end = 6;
            REDIM lv_partitionq_arr[], lv_partitionq_end;
            lv_partitionq_arr[0] = 1.0;
            lv_partitionq_arr[1] = 1.0;
            lv_partitionq_arr[2] = 1.0;
            lv_partitionq_arr[3] = 2.0;
            lv_partitionq_arr[4] = 2.0;
            lv_partitionq_arr[5] = 3.0;
         IF_END

         IF lv_partitionq_end <= nn:
            ii = lv_partitionq_end;
            lv_partitionq_end = nn + 1;
            REDIM lv_partitionq_arr[], lv_partitionq_end;
            WHILE ii < lv_partitionq_end:
               sum = 0.0;
               ssign = 1.0;
               kk = 1;
               jj = ii - 1;
               WHILE 0 <= jj:
                  sum += ssign * lv_partitionq_arr[jj];
                  jj -= kk;
                  IF jj < 0:
                     WHILE_EXIT;
                  IF_END
                  sum += ssign * lv_partitionq_arr[jj];
                  ssign = -ssign;
                  kk += 1;
                  jj -= (2 * kk - 1);
               WHILE_END
               ee = Kw.round(SQRT(1.0 + 12.0 * ii) / 6.0);
               IF ii == (3 * ee * ee - ee) OR ii == (3 * ee * ee + ee):
                  IF Kw.isodd(ee):
                     sum -= 1.0;
                  ELSE:
                     sum += 1.0;
                  IF_END
               IF_END
               lv_partitionq_arr[ii] = sum;
               ii += 1;
            WHILE_END
         IF_END
         retvalu = lv_partitionq_arr[nn];
      IF_END

      RETURN retvalu;
   FUNC_END
BLOCK_END # partitionq function
#TEST:partitionq(30) == 296
