#    Copyright (C) 2015-2021 by Kevin D. Woerner
# 2021-04-15 kdw  indent work
# 2021-03-23 kdw  minor refactor
# 2021-03-13 kdw  line len upped to 77
# 2020-12-03 kdw  float explicit const work
# 2020-11-28 kdw  macro syntax overhaul
# 2020-11-23 kdw  replace 1.0E0 with 1.0
# 2020-08-19 kdw  comment change
# 2020-08-17 kdw  macro syntax changed
# 2020-07-27 kdw  block syntax
# 2020-07-24 kdw  comment cleanup
# 2020-05-14 kdw  local funcs only in blocks
# 2020-05-13 kdw  comment trivially changed
# 2020-05-11 kdw  local-func syntax changed
# 2020-05-01 kdw  comment changed
# 2020-04-26 kdw  block indentation
# 2020-04-14 kdw  tests added
# 2020-04-12 kdw  comment change
# 2020-04-08 kdw  preprocess sigil change
# 2020-03-09 kdw  LO[C]AL_.* keywords
# 2020-03-01 kdw  .*_NE[X]T deprecated, et al.
# 2020-02-28 kdw  poly eval work
# 2020-02-26 kdw  arr[a]y and hor[n]er work
# 2019-12-27 kdw  eplicit K[w] module
# 2019-12-26 kdw  module name addded to funcs
# 2019-11-17 kdw  include Macros file
# 2019-08-24 kdw  for and count loops have from clause
# 2019-08-17 kdw  L[O]G to L[N]
# 2019-08-11 kdw  comment cleanup
# 2019-08-06 kdw  array format issues
# 2019-05-29 kdw  comment changed
# 2019-05-24 kdw  local replaced private
# 2019-05-22 kdw  s/FU[N]CT[I]ON/FU[N]C/g
# 2019-05-16 kdw  loop limit def mved
# 2019-05-01 kdw  consts explicit module name
# 2019-03-19 kdw  re[t]_val to re[t]valu
# 2019-03-18 kdw  macro syntax changed
# 2019-03-11 kdw  comments to array dcls
# 2019-03-08 kdw  is[e]qual to is[e]q, et al.
# 2019-03-04 kdw  loop-limit work
# 2019-01-03 kdw  Await counter changed
# 2018-07-19 kdw  comments; array reformat
# 2018-07-17 kdw  private lf_.* funcs
# 2018-07-13 kdw  float number reformt
# 2018-05-17 kdw  AR(R)AY.* and HOR[N]ER syntax
# 2018-05-16 kdw  A(R)RAY syntax
# 2018-04-03 kdw  rm () from return
# 2018-02-16 kdw  minor refactor
# 2018-01-08 kdw  w[mp] and inv
# 2017-11-26 kdw  FR[O]M and B[Y] keywords
# 2017-11-22 kdw  var renam
# 2017-08-30 kdw  s/DBL_/DBL/;s/FLT_/FLT/
# 2017-05-31 kdw  fvar rename; comments
# 2017-04-30 kdw  func to function
# 2017-03-19 kdw  comment changed
# 2017-03-10 kdw  get Fw[i]p_Pa[r]se to work
# 2017-03-06 kdw  sigils rmed
# 2017-03-01 kdw  var[y]log-a[d]d space messup
# 2017-02-28 kdw  REQ[U]IRE function ()
# 2017-02-27 kdw  lf_l(a)mbert_iter
# 2017-02-20 kdw  vars renamd
# 2017-02-14 kdw  FWIP Loop syntax changed; (L)NG to (I)NT
# 2017-02-12 kdw  FWIP language change
# 2016-11-23 kdw  int to lng
# 2016-11-21 kdw  D(E)F to F(U)NC
# 2016-11-20 kdw  language change
# 2016-11-16 kdw  comments
# 2016-11-15 kdw  (M)OD/(B)IT* syntax change
# 2016-11-14 kdw  Ha(l)ley algorithm correction
# 2016-11-11 kdw  sec(a)nt algorithm refactor
# 2016-11-08 kdw  A(W)AIT.*CO(U)NT syntax
# 2016-11-07 kdw  refactor lf_lambertwx
# 2016-11-07 kdw  __LA[N]G* syntax change
# 2016-10-31 kdw  E(X)ITL(O)OP
# 2016-09-15 kdw  lang change
# 2016-09-13 kdw  lang change
# 2016-05-18 kdw  comment change
# 2015-12-31 kdw  bounded (possible) infinite loops
# 2015-12-30 kdw  tweak
# 2015-12-14 kdw  long lines
# 2015-12-11 kdw  s/LC_// from some consts
# 2015-12-10 kdw  added [] to array args
# 2015-12-02 kdw  requires line
# 2015-11-23 kdw  refactor
# 2015-11-18 kdw  simplified approximation
# 2015-11-17 kdw  F[O]R format changed
# 2015-11-13 kdw  long lines addressed
# 2015-10-11 kdw  refactor / renamed functions
# 2015-10-09 kdw  renamed i[n]v functions
# 2015-09-30 kdw  rmed unused variables
# 2015-09-29 kdw  debugging c[b]rt
# 2015-09-27 kdw  debugging
# 2015-09-20 kdw  created

{INSERT_FILE "Macros.fwip" }
BLOCK:
   BLOCK_DEF FUNC DBL lf_lambert_iter(DBL xx, DBL nearw_zero):
      ## Lamberts W0(x) function defined by x=y*exp(y)
      INT ii;
      DBL eww;
      DBL tnn;
      DBL snn;
      DBL unn;
      DBL delta;
      DBL wjj;
      DBL wjj_prev;

      # Should have XX about NEARW_ZERO * EXP(NEARW_ZERO)
      wjj = nearw_zero;
      # refine result using Halleys method
      AWAIT Kw.iseq(wjj, wjj_prev) COUNT ii FROM 0 TO {LOOP_LIMIT}:
         eww = EXP(wjj);
         tnn = wjj * eww - xx;
         snn = (wjj + 2.0) / (2.0 * (wjj + 1.0));
         unn = (wjj + 1.0) * eww;
         delta = tnn / (tnn * snn - unn);
         wjj_prev = wjj;
         wjj += delta;
      AWAIT_END

      # Should have WJJ = W(XX), I.E. XX = WJJ * EXP(WJJ)
      RETURN wjj;
   FUNC_END

   FUNC DBL wp(DBL xx):
      # lambert function: (-Inf,-1/E,+Inf) to (-1,-1,+Inf)
      # XX = W0 * EXP(W0)
      DBL tnn;
      DBL snn;
      DBL near_w;
      DBL retvalu;

      IF xx <= -EXP(-1.0):   # -0.367879+
         retvalu = -1.0;
      ELSE:
         # Get an approximation of NEAR_W = Wp(XX)
         IF xx < 3.0:  # (-EXP(-1),3)
            snn = Kw.E * xx + 1.0;
            near_w = Kw.cbrt(snn) - 1.0 + 0.025 * (snn / Kw.E);
         ELSE:   # [3,Inf)
            snn = LN(xx);
            tnn = LN(LN(xx));
            near_w = snn - tnn + tnn / snn;
         IF_END
         # Now NEAR_W is an approximation of NEAR_W = WP(XX)
         # I.E. XX about NEAR_W * EXP(NEAR_W)
         retvalu = lf_lambert_iter(xx, near_w);
      IF_END

      RETURN retvalu;
   FUNC_END

   FUNC DBL wm(DBL xx):
      # lambert function: [-1/E,0) to [-1,-Inf)
      # XX = WM1 * EXP(WM1)
      INT ii;
      DBL near_w;
      DBL retvalu;
      DBL tnn;
      DBL numer;
      DBL denom;

      IF xx <= -EXP(-1.0):   # (-Inf,-0.367879+)
         retvalu = -1.0;
      ELSE:
         # Get an approximation of NEAR_W = WM(XX)
         IF xx < -0.303: # (-1/E,-0.303)
            tnn = -SQRT(2.0 * (1.0 + Kw.E * xx));
            near_w = ((((((((((
                     + 226287557.0 / 37623398400.0) * tnn
                     - 1963.0 / 204120.0          ) * tnn
                     + 680863.0 / 43545600.0      ) * tnn
                     - 221.0 / 8505.0             ) * tnn
                     + 769.0 / 17280.0            ) * tnn
                     - 43.0 / 540.0               ) * tnn
                     + 11.0 / 72.0                ) * tnn
                     - 1.0 / 3.0                  ) * tnn
                     + 1.0                        ) * tnn
                     - 1.0                        );
         ELSIF xx < -0.0510129:  # [-0.303,-0.0510129)
            numer = (((
                     + 6.5794931769023040E+2) * xx
                     + 2.5388810188892484E+2) * xx
                     - 7.8141767239074400E+0);
            denom = ((((((
                     + 1.4779341280760887E+3) * xx
                     + 9.6217849696986600E+2) * xx
                     + 6.8260739999094280E+2) * xx
                     + 9.9985670831076100E+1) * xx
                     - 6.0439587136908080E+1) * xx
                     + 1.0                  );
            near_w = numer / denom;
         ELSIF xx < 0.0:   # [-0.0510129,0)
            near_w = LN(-xx);
            FOR ii FROM 0 TO 8:
               near_w = LN(xx / near_w);
            FOR_END
         ELSE:   # [0,Inf)
            near_w = Kw.DBLMAX;
         IF_END
         # Now NEAR_W is an approximation of NEAR_W = WM(XX)
         # I.E. XX about NEAR_W * EXP(NEAR_W)
         retvalu = lf_lambert_iter(xx, near_w);
      IF_END

      RETURN retvalu;
   FUNC_END
BLOCK_END

FUNC DBL wpinv(DBL zz):
   # inverse lambert function == x*exp(x):
   # (-Inf,-1/E,+Inf) to (0,-1,+Inf)
   RETURN zz * EXP(zz);
FUNC_END

FUNC DBL wminv(DBL zz):
   # inverse lambert function == x*exp(x):
   # (-Inf,-1/E,+Inf) to (0,-1,+Inf)
   RETURN zz * EXP(zz);
FUNC_END
#TEST:wpinv(wp(1.56))-1.56;
#TEST:wp(TAU)     -(TAU/exp(wp(TAU)));
